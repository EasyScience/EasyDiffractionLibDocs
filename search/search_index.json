{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Making diffraction data analysis easy","text":""},{"location":"#about","title":"About","text":"<p>EasyDiffraction is a scientific software for the calculation of neutron powder diffraction pattern based on a structural model and refinement of its parameters against experimental data.</p> <p>EasyDiffraction is distributed both as a cross-platform desktop application and as a Python library.</p> <p>Here you can find how to use the EasyDiffraction Python library. The EasyDiffraction graphical user interface documentation can be found elsewhere.</p>"},{"location":"#license","title":"License","text":"<p>EasyDiffraction is licensed under the BSD 3-Clause License.</p>"},{"location":"#latest-release","title":"Latest release","text":"<p>The latest release of EasyDiffraction is v0.1.4 (6 Nov 2024).</p>"},{"location":"abbreviations/","title":"Abbreviations","text":"<p>This page contains the most common abbreviation labels used in EasyDiffraction documentation.</p>"},{"location":"abbreviations/#dictionary-type-labels","title":"Dictionary type labels","text":"<ul> <li>coreCIF Core CIF dictionary by the IUCr.</li> <li>pdCIF Powder CIF dictionary by the IUCr.</li> <li>customCIF Custom CIF dictionary by the EasyDiffraction developers.</li> </ul>"},{"location":"abbreviations/#experiment-type-labels","title":"Experiment type labels","text":""},{"location":"abbreviations/#neutron-diffraction","title":"Neutron diffraction","text":"<ul> <li>pd-neut-cwl Powder neutron diffraction with constant wavelength.</li> <li>pd-neut-tof Powder neutron diffraction with time-of-flight.</li> <li>sc-neut-cwl Single crystal neutron diffraction with constant wavelength.</li> </ul>"},{"location":"abbreviations/#x-ray-diffraction","title":"X-ray diffraction","text":"<ul> <li>pd-xray Powder X-ray diffraction.</li> </ul>"},{"location":"dictionaries/","title":"Dictionaries","text":"<p>All parameter names used in EasyDiffraction are divided into several dictionaries given below. Each keyword in the dictionaries has one badge showing the corresponding type of dictionary, and can have one or more badges showing the type of experiment to which the keyword belongs.</p>"},{"location":"dictionaries/#model-dictionary","title":"Model dictionary","text":"<p>This dictionary provides data names for describing model parameters.</p> <p>pd-neut-cwl pd-neut-tof sc-neut-cwl pd-xray</p> <ul> <li>_space_group coreCIF<ul> <li>_space_group.name_H-M_alt coreCIF</li> <li>_space_group.IT_coordinate_system_code coreCIF</li> </ul> </li> <li>_cell coreCIF<ul> <li>_cell.angle_alpha coreCIF</li> <li>_cell.angle_beta coreCIF</li> <li>_cell.angle_gamma coreCIF</li> <li>_cell.length_a coreCIF</li> <li>_cell.length_b coreCIF</li> <li>_cell.length_c coreCIF</li> </ul> </li> <li>_atom_site coreCIF<ul> <li>_atom_site.label coreCIF</li> <li>_atom_site.type_symbol coreCIF</li> <li>_atom_site.fract_x coreCIF</li> <li>_atom_site.fract_y coreCIF</li> <li>_atom_site.fract_z coreCIF</li> <li>_atom_site.occupancy coreCIF</li> <li>_atom_site.ADP_type coreCIF</li> <li>_atom_site.B_iso_or_equiv coreCIF</li> <li>_atom_site.site_symmetry_multiplicity coreCIF</li> <li>_atom_site.Wyckoff_symbol coreCIF</li> </ul> </li> </ul>"},{"location":"dictionaries/#experiment-and-instrument-dictionary","title":"Experiment and instrument dictionary","text":"<p>This dictionary provides data names for describing experimental and instrumental parameters.</p> <p>pd-neut-cwl pd-neut-tof sc-neut-cwl pd-xray</p> <ul> <li>_diffrn_radiation coreCIF<ul> <li>_diffrn_radiation.probe coreCIF</li> </ul> </li> </ul> <p>pd-neut-cwl sc-neut-cwl pd-xray</p> <ul> <li>_diffrn_radiation_wavelength coreCIF<ul> <li>_diffrn_radiation_wavelength.wavelength coreCIF</li> </ul> </li> <li>_pd_background pdCIF<ul> <li>_pd_background.line_segment_X pdCIF</li> <li>_pd_background.line_segment_intensity pdCIF</li> <li>_pd_background.X_coordinate pdCIF</li> </ul> </li> <li>_pd_phase_block pdCIF<ul> <li>_pd_phase_block.id pdCIF</li> <li>_pd_phase_block.scale customCIF</li> </ul> </li> </ul> <p>pd-neut-cwl</p> <ul> <li>_pd_calib pdCIF<ul> <li>_pd_calib.2theta_offset pdCIF</li> </ul> </li> <li>_pd_instr pdCIF<ul> <li>_pd_instr.resolution_u customCIF</li> <li>_pd_instr.resolution_v customCIF</li> <li>_pd_instr.resolution_w customCIF</li> <li>_pd_instr.resolution_x customCIF</li> <li>_pd_instr.resolution_y customCIF</li> <li>_pd_instr.reflex_asymmetry_p1 customCIF</li> <li>_pd_instr.reflex_asymmetry_p2 customCIF</li> <li>_pd_instr.reflex_asymmetry_p3 customCIF</li> <li>_pd_instr.reflex_asymmetry_p4 customCIF</li> </ul> </li> <li>_pd_meas pdCIF<ul> <li>_pd_meas.2theta_scan pdCIF</li> <li>_pd_meas.intensity_total pdCIF</li> <li>_pd_meas.intensity_total_su pdCIF</li> </ul> </li> </ul> <p>pd-neut-tof</p> <ul> <li>_pd_instr pdCIF<ul> <li>_pd_instr.zero customCIF</li> <li>_pd_instr.dtt1 customCIF</li> <li>_pd_instr.dtt2 customCIF</li> <li>_pd_instr.2theta_bank customCIF</li> <li>_pd_instr.alpha0 customCIF</li> <li>_pd_instr.alpha1 customCIF</li> <li>_pd_instr.beta0 customCIF</li> <li>_pd_instr.beta1 customCIF</li> <li>_pd_instr.sigma0 customCIF</li> <li>_pd_instr.sigma1 customCIF</li> <li>_pd_instr.sigma2 customCIF</li> </ul> </li> <li>_pd_meas pdCIF<ul> <li>_pd_meas.time_of_flight pdCIF</li> <li>_pd_meas.intensity_total pdCIF</li> <li>_pd_meas.intensity_total_su pdCIF</li> </ul> </li> </ul> <p>sc-neut-cwl</p> <ul> <li> <p>_extinction customCIF</p> <ul> <li>_extinction.model customCIF</li> <li>_extinction.mosaicity customCIF</li> <li>_extinction.radius customCIF</li> </ul> </li> <li> <p>_exptl_crystal customCIF</p> <ul> <li>_exptl_crystal.id customCIF</li> <li>_exptl_crystal.scale customCIF</li> </ul> </li> </ul>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#requirements","title":"Requirements","text":"<p>The EasyDiffraction library is developed in the Python programming language and thus requires Python to be installed on your system. The library is compatible with Python versions from 3.9 to 3.12.</p>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#from-pypi","title":"From PyPI recommended","text":"<p>EasyDiffraction is published on the Python Package Index (PyPI) repository and can be installed with the package installer for Python (pip), ideally by using a virtual environment.</p> <p>We recommend installing the latest release of EasyDiffraction with the <code>charts</code> extras, which include optional dependencies used for simplified visualization of charts and tables. This can be especially useful for running the Jupyter Notebook examples. To do so, use the following command: <pre><code>pip install 'easydiffraction[charts]'\n</code></pre></p> <p>If only the core functionality is needed, the library can be installed simply with: <pre><code>pip install easydiffraction\n</code></pre></p> <p>To install a specific version of EasyDiffraction, e.g. 0.1.3, use: <pre><code>pip install 'easydiffraction==0.1.3'\n</code></pre></p> <p>Upgrading to the latest version can be done with: <pre><code>pip install --upgrade --force-reinstall easydiffraction\n</code></pre></p> <p>To show the currently installed version, use: <pre><code>pip show easydiffraction\n</code></pre></p>"},{"location":"getting-started/#from-github","title":"From GitHub","text":"<p>Installing an unreleased version is not recommended and should only be done for testing purposes. </p> <p>Here is an example of how to install EasyDiffraction directly from our GitHub repository, e.g., from the <code>develop</code> branch: <pre><code>pip install git+https://github.com/EasyScience/EasyDiffractionLib@develop\n</code></pre></p> <p>To do the same with extra dependencies, use: <pre><code>pip install 'easydiffraction[charts] @ git+https://github.com/EasyScience/EasyDiffractionLib@develop'\n</code></pre></p>"},{"location":"getting-started/#examples","title":"Examples","text":"<p>We have a collection of Jupyter Notebook examples that demonstrate how to use EasyDiffraction for various tasks. These examples are presented in the How to use section of the documentation as static HTML pages.</p> <p>You can also run these Jupyter Notebook examples yourself either locally or in Google Colab. The examples are available in the <code>examples/</code> directory of the EasyDiffraction repository on GitHub.</p>"},{"location":"getting-started/#run-locally","title":"Run locally","text":"<p>To run the examples locally, you need to install Jupyter Notebook. You can do this with the following commands:</p> <ul> <li>Install Jupyter Notebook:   <pre><code>pip install notebook\n</code></pre></li> <li>Download EasyDiffraction examples from GitHub, e.g., using <code>curl</code>:   <pre><code>curl https://codeload.github.com/easyscience/EasyDiffractionLib/tar.gz/develop | tar -xz --strip=1 EasyDiffractionLib-develop/examples\n</code></pre></li> <li>Run Jupyter Notebook server:   <pre><code>jupyter notebook examples/\n</code></pre></li> <li>Open your web browser and go to:   <pre><code>http://localhost:8888/\n</code></pre></li> <li>Select one of the <code>*.ipynb</code> files.</li> </ul>"},{"location":"getting-started/#via-google-colab","title":"Via Google Colab google account required","text":"<p>Google Colab is a free cloud service that allows you to run Jupyter Notebooks in the cloud. So, you can run the examples without installing anything on your local machine.</p> <p>To run the examples in Google Colab, you need to have a Google account.</p> <p>In the top right corner of each example, under the How to use section, you will find a button to open that example in Google Colab  </p>"},{"location":"project-structure/","title":"Project structure","text":"<p>Input/output files for EasyDiffraction are in simple and human-readable data format STAR/CIF with the specifications of International Union of Crystallography, where possible.</p>"},{"location":"project-structure/#cif-based-project-files","title":"CIF-based project files","text":"<p>Example project structure for the constant wavelength powder neutron diffraction measurement is given below:</p> <pre><code>La0.5Ba0.5CoO3     - Project directory.\n\u251c\u2500\u2500 project.cif    - Main project description file.\n\u251c\u2500\u2500 models         - Folder with individual crystallographic phases.\n\u2502   \u251c\u2500\u2500 lbco.cif   - File with La0.5Ba0.5CoO3 phase parameters.\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 experiments    - Folder with instrumental parameters and measured data.\n\u2502   \u251c\u2500\u2500 hrpt.cif   - Measured data from HRPT@PSI &amp; instrumental parameters.\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 summary\n    \u2514\u2500\u2500 report.cif - Summary report after structure refinement.\n</code></pre> <p>Here is the content of the project files:</p>"},{"location":"project-structure/#projectcif","title":"project.cif","text":"<pre><code>data_La0.5Ba0.5CoO3\n\n_project.description \"neutrons, powder, constant wavelength, HRPT@PSI\"\n\nloop_\n_model.cif_file_name\nlbco.cif\n\nloop_\n_experiment.cif_file_name\nhrpt.cif\n</code></pre>"},{"location":"project-structure/#models-lbcocif","title":"models / lbco.cif","text":"<pre><code>data_lbco\n\n_cell.length_a      3.8909(1)\n_cell.length_b      3.8909\n_cell.length_c      3.8909\n_cell.angle_alpha  90\n_cell.angle_beta   90\n_cell.angle_gamma  90\n\n_space_group.name_H-M_alt               \"P m -3 m\"\n_space_group.IT_coordinate_system_code  1\n\nloop_\n_atom_site.label\n_atom_site.type_symbol\n_atom_site.fract_x\n_atom_site.fract_y\n_atom_site.fract_z\n_atom_site.occupancy\n_atom_site.adp_type\n_atom_site.B_iso_or_equiv\nLa La   0   0   0     0.5  Biso 0.4958\nBa Ba   0   0   0     0.5  Biso 0.4943\nCo Co   0.5 0.5 0.5   1    Biso 0.2567\nO  O    0   0.5 0.5   1    Biso 1.4041\n</code></pre>"},{"location":"project-structure/#experiments-hrptcif","title":"experiments / hrpt.cif","text":"<pre><code>data_hrpt\n\n_diffrn_radiation.probe neutron\n_diffrn_radiation_wavelength.wavelength 1.494\n\n_pd_calib.2theta_offset  0.6225(4)\n\n_pd_instr.resolution_u  0.0834\n_pd_instr.resolution_v -0.1168\n_pd_instr.resolution_w  0.123\n_pd_instr.resolution_x  0\n_pd_instr.resolution_y  0.0797\n\n_pd_instr.reflex_asymmetry_p1 0\n_pd_instr.reflex_asymmetry_p2 0\n_pd_instr.reflex_asymmetry_p3 0\n_pd_instr.reflex_asymmetry_p4 0\n\nloop_\n_pd_phase_block.id\n_pd_phase_block.scale\nlbco 9.0976(3)\n\nloop_\n_pd_background.line_segment_X\n_pd_background.line_segment_intensity\n_pd_background.X_coordinate\n 10  174.3  2theta\n 20  159.8  2theta\n 30  167.9  2theta\n 50  166.1  2theta\n 70  172.3  2theta\n 90  171.1  2theta\n110  172.4  2theta\n130  182.5  2theta\n150  173.0  2theta\n165  171.1  2theta\n\nloop_\n_pd_meas.2theta_scan\n_pd_meas.intensity_total\n_pd_meas.intensity_total_su\n 10.00  167  12.6\n 10.05  157  12.5\n 10.10  187  13.3\n 10.15  197  14.0\n 10.20  164  12.5\n 10.25  171  13.0\n...\n164.60  153  20.7\n164.65  173  30.1\n164.70  187  27.9\n164.75  175  38.2\n164.80  168  30.9\n164.85  109  41.2\n</code></pre>"},{"location":"dictionaries/_atom_site/","title":"atom site","text":"<p>coreCIF</p>"},{"location":"dictionaries/_atom_site/#_atom_site","title":"_atom_site","text":"<p>Data items in this category record details about the atom sites in a crystal structure, such as the positional coordinates and atomic displacement parameters. Please see the IUCr page for further details.</p>"},{"location":"dictionaries/_atom_site/#_atom_sitelabel","title":"_atom_site.label","text":"<p>This is a unique identifier for a particular site in the asymmetric unit of the crystal unit cell.</p>"},{"location":"dictionaries/_atom_site/#_atom_sitetype_symbol","title":"_atom_site.type_symbol","text":"<p>A code to identify the atom specie(s) occupying this site.</p>"},{"location":"dictionaries/_atom_site/#_atom_sitefract","title":"_atom_site.fract","text":"<p>Atom-site coordinates as fractions of the _cell_length values.</p> <ul> <li>_atom_site.fract_x</li> <li>_atom_site.fract_y</li> <li>_atom_site.fract_z</li> </ul>"},{"location":"dictionaries/_atom_site/#_atom_siteoccupancy","title":"_atom_site.occupancy","text":"<p>The fraction of the atom type present at this site.</p>"},{"location":"dictionaries/_atom_site/#_atom_siteadp_type","title":"_atom_site.ADP_type","text":"<p>Code for type of atomic displacement parameters used for the site. Currently only <code>Biso</code> (isotropic B) is supported.</p>"},{"location":"dictionaries/_atom_site/#_atom_siteb_iso_or_equiv","title":"_atom_site.B_iso_or_equiv","text":"<p>Isotropic atomic displacement parameter, or equivalent isotropic atomic displacement parameter, in angstroms squared.</p>"},{"location":"dictionaries/_atom_site/#_atom_sitesite_symmetry_multiplicity","title":"_atom_site.site_symmetry_multiplicity","text":"<p><code>optional parameter</code></p> <p>The number of different sites that are generated by the application of the space-group symmetry to the coordinates given for this site. It is equal to the multiplicity given for this Wyckoff site in International Tables for Crystallography Vol. A (2002).</p>"},{"location":"dictionaries/_atom_site/#_atom_sitewyckoff_symbol","title":"_atom_site.Wyckoff_symbol","text":"<p><code>optional parameter</code></p> <p>The Wyckoff symbol (letter) as listed in the space-group tables of International Tables for Crystallography Vol. A.</p>"},{"location":"dictionaries/_cell/","title":"cell","text":"<p>coreCIF</p>"},{"location":"dictionaries/_cell/#_cell","title":"_cell","text":"<p>Data items in this category record details about the crystallographic cell parameters and their measurement. Please see the IUCr page for further details.</p>"},{"location":"dictionaries/_cell/#_cellangle","title":"_cell.angle","text":"<p>The angles between the bounding cell axes in degrees.</p> <ul> <li>_cell.angle_alpha</li> <li>_cell.angle_beta</li> <li>_cell.angle_gamma</li> </ul>"},{"location":"dictionaries/_cell/#_celllength","title":"_cell.length","text":"<p>The lengths of each cell axis in angstroms.</p> <ul> <li>_cell.length_a</li> <li>_cell.length_b</li> <li>_cell.length_c</li> </ul>"},{"location":"dictionaries/_diffrn_radiation/","title":"diffrn radiation","text":"<p>coreCIF</p>"},{"location":"dictionaries/_diffrn_radiation/#_diffrn_radiation","title":"_diffrn_radiation","text":"<p>Data items in this category describe the radiation used in measuring the diffraction intensities. Please see the IUCr page for further details.</p>"},{"location":"dictionaries/_diffrn_radiation/#_diffrn_radiationprobe","title":"_diffrn_radiation.probe","text":"<p>The nature of the radiation used (i.e. the name of the subatomic particle or the region of the electromagnetic spectrum).</p> <p>Supported values: <code>neutron</code> and <code>x-ray</code></p>"},{"location":"dictionaries/_diffrn_radiation_wavelength/","title":"diffrn radiation wavelength","text":"<p>coreCIF</p>"},{"location":"dictionaries/_diffrn_radiation_wavelength/#_diffrn_radiation_wavelength","title":"_diffrn_radiation_wavelength","text":"<p>Data items in this category describe the wavelength of radiation used in diffraction measurements. Please see the IUCr page for further details.</p>"},{"location":"dictionaries/_diffrn_radiation_wavelength/#_diffrn_radiation_wavelengthwavelength","title":"_diffrn_radiation_wavelength.wavelength","text":"<p>Wavelength of the radiation used to measure the unit cell.</p>"},{"location":"dictionaries/_exptl_crystal/","title":"exptl crystal","text":"<p>customCIF</p>"},{"location":"dictionaries/_extinction/","title":"extinction","text":"<p>customCIF</p>"},{"location":"dictionaries/_pd_background/","title":"pd background","text":"<p>pdCIF</p>"},{"location":"dictionaries/_pd_background/#_pd_background","title":"_pd_background","text":"<p>This category defines various background functions that could be used when calculating diffractograms. Please see the IUCr page for further details.</p>"},{"location":"dictionaries/_pd_background/#_pd_backgroundline_segment_x","title":"_pd_background.line_segment_X","text":"<p>List of X-coordinates used to create many straight-line segments representing the background in a calculated diffractogram.</p> <p>Supported values: <code>2theta</code> and <code>time-of-flight</code></p>"},{"location":"dictionaries/_pd_background/#_pd_backgroundline_segment_intensity","title":"_pd_background.line_segment_intensity","text":"<p>List of intensities used to create many straight-line segments representing the background in a calculated diffractogram.</p>"},{"location":"dictionaries/_pd_background/#_pd_backgroundx_coordinate","title":"_pd_background.X_coordinate","text":"<p>The type of X-coordinate against which the pd_background values were calculated.</p>"},{"location":"dictionaries/_pd_calib/","title":"pd calib","text":"<p>customCIF</p>"},{"location":"dictionaries/_pd_calib/#_pd_calib","title":"_pd_calib","text":"<p>This section defines the parameters used for the calibration of the instrument, similar to this IUCr section.</p>"},{"location":"dictionaries/_pd_calib/#_pd_calib2theta_offset","title":"_pd_calib.2theta_offset","text":"<p>An offset angle (in degrees) used to calibrate 2\u03b8.</p>"},{"location":"dictionaries/_pd_instr/","title":"pd instr","text":"<p>customCIF</p>"},{"location":"dictionaries/_pd_instr/#_pd_instr","title":"_pd_instr","text":"<p>This section contains information relevant to the instrument used for the diffraction measurement, similar to this IUCr section.</p>"},{"location":"dictionaries/_pd_instr/#_pd_instrresolution","title":"_pd_instr.resolution","text":"<p>In general, the profile of a Bragg reflection centred at the peak position can be approximated by mathematical convolution of contributions from the instrument, called the instrumental resolution function, and from the microstructure of the sample. Because many contributions to powder diffraction peaks have a nearly Gaussian or Lorentzian shape, the pseudo-Voigt function, is widely used to describe peak profiles in powder diffraction.</p> <p>Half-width parameters (normally characterising the instrumental resolution function) as implemented in CrysPy:</p> <ul> <li>_pd_instr.resolution_u</li> <li>_pd_instr.resolution_v</li> <li>_pd_instr.resolution_w</li> </ul> <p>Lorentzian isotropic microstrain parameter as implemented in CrysPy:</p> <ul> <li>_pd_instr.resolution_x</li> </ul> <p>Lorentzian isotropic particle size parameteras implemented in CrysPy:</p> <ul> <li>_pd_instr.resolution_y</li> </ul>"},{"location":"dictionaries/_pd_instr/#_pd_instrreflex_asymmetry","title":"_pd_instr.reflex_asymmetry","text":"<p>Peak profile asymmetry parameters as implemented in CrysPy.</p> <ul> <li>_pd_instr.reflex_asymmetry_p1</li> <li>_pd_instr.reflex_asymmetry_p2</li> <li>_pd_instr.reflex_asymmetry_p3</li> <li>_pd_instr.reflex_asymmetry_p4</li> </ul>"},{"location":"dictionaries/_pd_instr/#_pd_instr2theta_bank","title":"_pd_instr.2theta_bank","text":"<p>Time-of-flight parameters as implemented in CrysPy.</p>"},{"location":"dictionaries/_pd_instr/#_pd_instrdtt","title":"_pd_instr.dtt","text":"<p>Time-of-flight parameters as implemented in CrysPy.</p> <ul> <li>_pd_instr.dtt1</li> <li>_pd_instr.dtt2</li> </ul>"},{"location":"dictionaries/_pd_instr/#_pd_instrzero","title":"_pd_instr.zero","text":"<p>Time-of-flight parameters as implemented in CrysPy.</p>"},{"location":"dictionaries/_pd_instr/#_pd_instralpha","title":"_pd_instr.alpha","text":"<p>Time-of-flight parameters as implemented in CrysPy.</p> <ul> <li>_pd_instr.alpha0</li> <li>_pd_instr.alpha1</li> </ul>"},{"location":"dictionaries/_pd_instr/#_pd_instrbeta","title":"_pd_instr.beta","text":"<p>Time-of-flight parameters as implemented in CrysPy.</p> <ul> <li>_pd_instr.beta0</li> <li>_pd_instr.beta1</li> </ul>"},{"location":"dictionaries/_pd_instr/#_pd_instrsigma","title":"_pd_instr.sigma","text":"<p>Time-of-flight parameters as implemented in CrysPy.</p> <ul> <li>_pd_instr.sigma0</li> <li>_pd_instr.sigma1</li> <li>_pd_instr.sigma2</li> </ul>"},{"location":"dictionaries/_pd_meas/","title":"pd meas","text":"<p>pdCIF</p>"},{"location":"dictionaries/_pd_meas/#_pd_meas","title":"_pd_meas","text":"<p>This section contains the measured diffractogram, similar to this IUCr section.</p>"},{"location":"dictionaries/_pd_meas/#_pd_meas2theta_scan","title":"_pd_meas.2theta_scan","text":"<p>2\u03b8 diffraction angle (in degrees) for intensity points measured in a scanning method.</p>"},{"location":"dictionaries/_pd_meas/#_pd_meastime-of-flight","title":"_pd_meas.time-of-flight","text":"<p>Measured time (in microseconds) for time-of-flight neutron measurements.</p>"},{"location":"dictionaries/_pd_meas/#_pd_measintensity_total","title":"_pd_meas.intensity_total","text":"<p>Intensity recorded at each measurement point as a function of angle.</p>"},{"location":"dictionaries/_pd_meas/#_pd_measintensity_total_su","title":"_pd_meas.intensity_total_su","text":"<p>Standard uncertainty of _pd_meas.2theta_scan.</p>"},{"location":"dictionaries/_pd_phase/","title":"pd phase","text":"<p>pdCIF</p>"},{"location":"dictionaries/_pd_phase/#_pd_phase_block","title":"_pd_phase_block","text":"<p>A table of phases relevant to the current data block. Each phase is identified by its data block identifier. Please see the IUCr page for further details.</p>"},{"location":"dictionaries/_pd_phase/#_pd_phase_blockid","title":"_pd_phase_block.id","text":"<p>A block ID code identifying a block containing phase information.</p>"},{"location":"dictionaries/_pd_phase/#_pd_phase_blockscale","title":"_pd_phase_block.scale","text":"<p>Phase scale.</p>"},{"location":"dictionaries/_space_group/","title":"space group","text":"<p>coreCIF</p>"},{"location":"dictionaries/_space_group/#_space_group","title":"_space_group","text":"<p>Contains all the data items that refer to the space group as a whole. Please see the IUCr page for further details.</p>"},{"location":"dictionaries/_space_group/#_space_groupname_h-m_alt","title":"_space_group.name_H-M_alt","text":"<p>The international Hermann-Mauguin space-group symbol as defined in International Tables for Crystallography Volume A. It allows any Hermann-Mauguin symbol to be given.</p>"},{"location":"dictionaries/_space_group/#_space_groupit_coordinate_system_code","title":"_space_group.IT_coordinate_system_code","text":"<p>A qualifier taken from the enumeration list identifying which setting in International Tables for Crystallography Volume A (2002) (IT) is used.</p>"},{"location":"examples/Change-minimizer/","title":"Change minimizer","text":"In\u00a0[\u00a0]: Copied! <pre>import easydiffraction as ed\n</pre> import easydiffraction as ed <p>Create a job \u2014 the main object to store all the information</p> In\u00a0[\u00a0]: Copied! <pre>job = ed.Job()\n</pre> job = ed.Job() In\u00a0[\u00a0]: Copied! <pre>ed.download_from_repository('lbco.cif', destination='data')\n</pre> ed.download_from_repository('lbco.cif', destination='data') <p>Load a phase from the downloaded CIF file</p> In\u00a0[\u00a0]: Copied! <pre>job.add_phase_from_file('data/lbco.cif')\nprint(job.phases)\n</pre> job.add_phase_from_file('data/lbco.cif') print(job.phases) <p>Show phase info in CIF format</p> In\u00a0[\u00a0]: Copied! <pre>phase = job.phases['lbco']\nprint(phase.cif)\n</pre> phase = job.phases['lbco'] print(phase.cif) <p>Display the crystal structure of a given model</p> In\u00a0[\u00a0]: Copied! <pre>job.show_crystal_structure(id='lbco')\n</pre> job.show_crystal_structure(id='lbco') In\u00a0[\u00a0]: Copied! <pre>job.add_experiment_from_file('data/hrpt.xye')\n</pre> job.add_experiment_from_file('data/hrpt.xye') <p>Display the experimentally measured data</p> In\u00a0[\u00a0]: Copied! <pre>job.show_experiment_chart()\n</pre> job.show_experiment_chart() <p>Define a point background</p> In\u00a0[\u00a0]: Copied! <pre>background_points = [(10.0, 170),\n                    (165.0, 170)]\n\njob.set_background(background_points)\n</pre> background_points = [(10.0, 170),                     (165.0, 170)]  job.set_background(background_points) <p>Display the experiment chart after setting the background</p> In\u00a0[\u00a0]: Copied! <pre>job.show_experiment_chart()\n</pre> job.show_experiment_chart() In\u00a0[\u00a0]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Create aliases for the two types of experimental parameters</p> In\u00a0[\u00a0]: Copied! <pre>pattern = job.pattern\ninstrument = job.instrument\n</pre> pattern = job.pattern instrument = job.instrument <p>Change the default value of the wavelength used in the experiment and display the analysis chart again</p> In\u00a0[\u00a0]: Copied! <pre>instrument.wavelength = 1.494\njob.show_analysis_chart()\n</pre> instrument.wavelength = 1.494 job.show_analysis_chart() <p>Select parameters to be refined</p> In\u00a0[\u00a0]: Copied! <pre>phase.scale.free = True\nphase.cell.length_a.free = True\npattern.zero_shift.free = True\ninstrument.resolution_u.free = True\ninstrument.resolution_v.free = True\ninstrument.resolution_w.free = True\ninstrument.resolution_y.free = True\n</pre> phase.scale.free = True phase.cell.length_a.free = True pattern.zero_shift.free = True instrument.resolution_u.free = True instrument.resolution_v.free = True instrument.resolution_w.free = True instrument.resolution_y.free = True <p>Set the initial values of the parameters to be refined and display the analysis chart again</p> In\u00a0[\u00a0]: Copied! <pre>phase.scale = 7\nphase.cell.length_a = 3.88\npattern.zero_shift = 0.3\ninstrument.resolution_u = 0.1\ninstrument.resolution_v = -0.1\ninstrument.resolution_w = 0.2\ninstrument.resolution_y = 0\njob.show_analysis_chart()\n</pre> phase.scale = 7 phase.cell.length_a = 3.88 pattern.zero_shift = 0.3 instrument.resolution_u = 0.1 instrument.resolution_v = -0.1 instrument.resolution_w = 0.2 instrument.resolution_y = 0 job.show_analysis_chart() <p>Print parameters to be refined (free parameters) before fitting with Lmfit</p> In\u00a0[\u00a0]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() <p>Show the current minimization engine</p> In\u00a0[\u00a0]: Copied! <pre>print(job.analysis.current_minimizer)\n</pre> print(job.analysis.current_minimizer) <p>Start minimization using the default minimizer (Least Squares method from the Lmfit library)</p> In\u00a0[\u00a0]: Copied! <pre>job.fit()\n</pre> job.fit() <p>Print the refined parameters after fitting with Lmfit</p> In\u00a0[\u00a0]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() <p>Display the analysis chart after the fitting with Lmfit</p> In\u00a0[\u00a0]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Show list of available minimisation engines</p> In\u00a0[\u00a0]: Copied! <pre>print(job.analysis.available_minimizers)\n</pre> print(job.analysis.available_minimizers) <p>Change the minimization method to simplex from the Bumps library</p> In\u00a0[\u00a0]: Copied! <pre>job.analysis.current_minimizer = 'Bumps_simplex'\nprint(job.analysis.current_minimizer)\n</pre> job.analysis.current_minimizer = 'Bumps_simplex' print(job.analysis.current_minimizer) <p>Reset the free parameters to their initial values (before fitting with Lmfit) and display the analysis chart</p> In\u00a0[\u00a0]: Copied! <pre>phase.scale = 7\nphase.cell.length_a = 3.88\npattern.zero_shift = 0.3\ninstrument.resolution_u = 0.1\ninstrument.resolution_v = -0.1\ninstrument.resolution_w = 0.2\ninstrument.resolution_y = 0\njob.show_analysis_chart()\n</pre> phase.scale = 7 phase.cell.length_a = 3.88 pattern.zero_shift = 0.3 instrument.resolution_u = 0.1 instrument.resolution_v = -0.1 instrument.resolution_w = 0.2 instrument.resolution_y = 0 job.show_analysis_chart() <p>Print free parameters before the fitting with Bumps</p> In\u00a0[\u00a0]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() <p>Start minimization with Bumps</p> In\u00a0[\u00a0]: Copied! <pre>job.fit()\n</pre> job.fit() <p>Print free parameters after the fitting with Bumps</p> In\u00a0[\u00a0]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() <p>Display the analysis chart after the fitting with Bumps</p> In\u00a0[\u00a0]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart()"},{"location":"examples/Change-minimizer/#change-minimizer","title":"Change minimizer\u00b6","text":"<p>This example shows how to change the minimization engine for refinement.</p>"},{"location":"examples/Change-minimizer/#import-easydiffraction","title":"Import EasyDiffraction\u00b6","text":""},{"location":"examples/Change-minimizer/#job","title":"Job\u00b6","text":""},{"location":"examples/Change-minimizer/#model","title":"Model\u00b6","text":"<p>Download the CIF file from the EasyDiffraction repository on GitHub</p>"},{"location":"examples/Change-minimizer/#experiment","title":"Experiment\u00b6","text":"<p>Load experimentally measured data from a file in XYE format</p>"},{"location":"examples/Change-minimizer/#analysis","title":"Analysis\u00b6","text":"<p>Display the analysis chart before setting initial parameter values</p>"},{"location":"examples/Define-experiment/","title":"Define experiment","text":"In\u00a0[\u00a0]: Copied! <pre>import easydiffraction as ed\n</pre> import easydiffraction as ed In\u00a0[\u00a0]: Copied! <pre>ed.download_from_repository('d1a.cif', destination='data')\n</pre> ed.download_from_repository('d1a.cif', destination='data') <p>Show content of the downloaded file (first 45 lines)</p> In\u00a0[\u00a0]: Copied! <pre>with open('data/d1a.cif') as f:\n    print(''.join(f.readlines()[:45]))\n</pre> with open('data/d1a.cif') as f:     print(''.join(f.readlines()[:45])) <p>Load the data from the file and show the chart</p> In\u00a0[\u00a0]: Copied! <pre>job = ed.Job(type='pd-neut-cwl')\njob.add_experiment_from_file('data/d1a.cif')\njob.show_experiment_chart()\n</pre> job = ed.Job(type='pd-neut-cwl') job.add_experiment_from_file('data/d1a.cif') job.show_experiment_chart() In\u00a0[\u00a0]: Copied! <pre>ed.download_from_repository('hrpt.xye', destination='data')\n</pre> ed.download_from_repository('hrpt.xye', destination='data') <p>Show content of the downloaded file (first 6 lines)</p> In\u00a0[\u00a0]: Copied! <pre>with open('data/hrpt.xye') as f:\n    print(''.join(f.readlines()[:6]))\n</pre> with open('data/hrpt.xye') as f:     print(''.join(f.readlines()[:6])) <p>Load the data from the file and show the chart</p> In\u00a0[\u00a0]: Copied! <pre>job = ed.Job(type='pd-neut-cwl')\njob.add_experiment_from_file('data/hrpt.xye')\njob.show_experiment_chart()\n</pre> job = ed.Job(type='pd-neut-cwl') job.add_experiment_from_file('data/hrpt.xye') job.show_experiment_chart() In\u00a0[\u00a0]: Copied! <pre>ed.download_from_repository('sepd.xye', destination='data')\n</pre> ed.download_from_repository('sepd.xye', destination='data') <p>Show content of the downloaded file (first 5 lines)</p> In\u00a0[\u00a0]: Copied! <pre>with open('data/sepd.xye') as f:\n    print(''.join(f.readlines()[:5]))\n</pre> with open('data/sepd.xye') as f:     print(''.join(f.readlines()[:5])) <p>Load the data from the file and show the chart</p> In\u00a0[\u00a0]: Copied! <pre>job = ed.Job(type='pd-neut-tof')\njob.add_experiment_from_file('data/sepd.xye')\njob.show_experiment_chart()\n</pre> job = ed.Job(type='pd-neut-tof') job.add_experiment_from_file('data/sepd.xye') job.show_experiment_chart()"},{"location":"examples/Define-experiment/#define-an-experiment","title":"Define an experiment\u00b6","text":"<p>This example shows how to define experimental parameters and load measured data in EasyDiffraction.</p>"},{"location":"examples/Define-experiment/#import-easydiffraction","title":"Import EasyDiffraction\u00b6","text":""},{"location":"examples/Define-experiment/#define-an-experiment","title":"Define an experiment\u00b6","text":""},{"location":"examples/Define-experiment/#powder-neutron-diffraction-with-constant-wavelength-pd-neut-cwl","title":"Powder neutron diffraction with constant wavelength <code>pd-neut-cwl</code>\u00b6","text":""},{"location":"examples/Define-experiment/#from-a-file-in-cif-format","title":"From a file in CIF format\u00b6","text":"<p>Download the data file from the EasyDiffraction repository on GitHub</p>"},{"location":"examples/Define-experiment/#from-a-file-in-xye-format","title":"From a file in XYE format\u00b6","text":"<p>Download the data file from the EasyDiffraction repository on GitHub</p>"},{"location":"examples/Define-experiment/#powder-neutron-diffraction-with-time-of-flight-pd-neut-tof","title":"Powder neutron diffraction with time-of-flight <code>pd-neut-tof</code>\u00b6","text":""},{"location":"examples/Define-experiment/#from-a-file-in-xye-format","title":"From a file in XYE format\u00b6","text":"<p>Download the data file from the EasyDiffraction repository on GitHub</p>"},{"location":"examples/Define-model/","title":"Define model","text":"In\u00a0[\u00a0]: Copied! <pre>import easydiffraction as ed\n</pre> import easydiffraction as ed In\u00a0[\u00a0]: Copied! <pre>job = ed.Job()\n</pre> job = ed.Job() In\u00a0[\u00a0]: Copied! <pre>phase = ed.Phase(name='nacl')\n</pre> phase = ed.Phase(name='nacl') <p>Set space group</p> In\u00a0[\u00a0]: Copied! <pre>phase.space_group.name_hm_alt = 'F m -3 m'\n</pre> phase.space_group.name_hm_alt = 'F m -3 m' <p>Set cell parameters</p> In\u00a0[\u00a0]: Copied! <pre>phase.cell.length_a = 5.691694\n</pre> phase.cell.length_a = 5.691694 <p>Add atoms</p> In\u00a0[\u00a0]: Copied! <pre>phase.atom_sites.append(label='Na',\n                        type_symbol='Na',\n                        fract_x=0,\n                        fract_y=0,\n                        fract_z=0,\n                        occupancy=1,\n                        b_iso_or_equiv=0.5)\nphase.atom_sites.append(label='Cl',\n                        type_symbol='Cl',\n                        fract_x=0,\n                        fract_y=0,\n                        fract_z=0.5,\n                        occupancy=1,\n                        b_iso_or_equiv=0.5)\n</pre> phase.atom_sites.append(label='Na',                         type_symbol='Na',                         fract_x=0,                         fract_y=0,                         fract_z=0,                         occupancy=1,                         b_iso_or_equiv=0.5) phase.atom_sites.append(label='Cl',                         type_symbol='Cl',                         fract_x=0,                         fract_y=0,                         fract_z=0.5,                         occupancy=1,                         b_iso_or_equiv=0.5) <p>Add phase to the job object</p> In\u00a0[\u00a0]: Copied! <pre>job.add_phase(phase=phase)\nprint(job.phases)\n</pre> job.add_phase(phase=phase) print(job.phases) <p>Show phase info in CIF format</p> In\u00a0[\u00a0]: Copied! <pre>phase = job.phases['nacl']\nprint(phase.cif)\n</pre> phase = job.phases['nacl'] print(phase.cif) <p>Display the crystal structure of a given model</p> In\u00a0[\u00a0]: Copied! <pre>job.show_crystal_structure(id='nacl')\n</pre> job.show_crystal_structure(id='nacl') <p>Download the CIF file from the EasyDiffraction repository on GitHub</p> In\u00a0[\u00a0]: Copied! <pre>ed.download_from_repository('lbco.cif', destination='data')\n</pre> ed.download_from_repository('lbco.cif', destination='data') <p>Load a phase from the downloaded CIF file</p> In\u00a0[\u00a0]: Copied! <pre>job.add_phase_from_file('data/lbco.cif')\nprint(job.phases)\n</pre> job.add_phase_from_file('data/lbco.cif') print(job.phases) <p>Show phase info in CIF format</p> In\u00a0[\u00a0]: Copied! <pre>print(job.phases['lbco'].cif)\n</pre> print(job.phases['lbco'].cif) <p>Display the crystal structure of a given model</p> In\u00a0[\u00a0]: Copied! <pre>job.show_crystal_structure(id='lbco')\n</pre> job.show_crystal_structure(id='lbco')"},{"location":"examples/Define-model/#define-a-model","title":"Define a model\u00b6","text":"<p>This example shows how to define a model of a crystal structure in EasyDiffraction.</p>"},{"location":"examples/Define-model/#import-easydiffraction","title":"Import EasyDiffraction\u00b6","text":""},{"location":"examples/Define-model/#create-a-job","title":"Create a job\u00b6","text":"<p>Create a job \u2014 the main object to store all the information</p>"},{"location":"examples/Define-model/#create-a-model-manually","title":"Create a model manually\u00b6","text":"<p>Create a phase object</p>"},{"location":"examples/Fitting_PD-NEUT-CW_LBCO-HRPT/","title":"NEUT-CW LBCO-HRPT","text":"In\u00a0[\u00a0]: Copied! <pre>import easydiffraction as ed\n</pre> import easydiffraction as ed In\u00a0[\u00a0]: Copied! <pre>job = ed.Job()\n</pre> job = ed.Job() In\u00a0[\u00a0]: Copied! <pre>ed.download_from_repository('lbco.cif', destination='data')\n</pre> ed.download_from_repository('lbco.cif', destination='data') <p>Load a phase from the downloaded CIF file</p> In\u00a0[\u00a0]: Copied! <pre>job.add_phase_from_file('data/lbco.cif')\nprint(job.phases)\n</pre> job.add_phase_from_file('data/lbco.cif') print(job.phases) <p>Show phase info in CIF format</p> In\u00a0[\u00a0]: Copied! <pre>print(job.phases['lbco'].cif)\n</pre> print(job.phases['lbco'].cif) <p>Display the crystal structure of a given model</p> In\u00a0[\u00a0]: Copied! <pre>job.show_crystal_structure(id='lbco')\n</pre> job.show_crystal_structure(id='lbco') In\u00a0[\u00a0]: Copied! <pre>ed.download_from_repository('hrpt.xye', destination='data')\n</pre> ed.download_from_repository('hrpt.xye', destination='data') <p>Show content of the downloaded file (first 6 lines)</p> In\u00a0[\u00a0]: Copied! <pre>with open('data/hrpt.xye') as f:\n    print(''.join(f.readlines()[:6]))\n</pre> with open('data/hrpt.xye') as f:     print(''.join(f.readlines()[:6])) <p>Load experimentally measured data from a file in XYE format</p> In\u00a0[\u00a0]: Copied! <pre>job.add_experiment_from_file('data/hrpt.xye')\n</pre> job.add_experiment_from_file('data/hrpt.xye') <p>Display the experimentally measured data</p> In\u00a0[\u00a0]: Copied! <pre>job.show_experiment_chart()\n</pre> job.show_experiment_chart() <p>Define a point background</p> In\u00a0[\u00a0]: Copied! <pre>job.set_background([(10.0, 170),\n                    (165.0, 170)])\n</pre> job.set_background([(10.0, 170),                     (165.0, 170)]) <p>Display the experiment chart after setting the background</p> In\u00a0[\u00a0]: Copied! <pre>job.show_experiment_chart()\n</pre> job.show_experiment_chart() In\u00a0[\u00a0]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Show all parameters before refinement</p> In\u00a0[\u00a0]: Copied! <pre>job.show_parameters()\n</pre> job.show_parameters() <p>Change the default value of the wavelength used in the experiment and display the analysis chart again</p> In\u00a0[\u00a0]: Copied! <pre>job.instrument.wavelength = 1.494\njob.show_analysis_chart()\n</pre> job.instrument.wavelength = 1.494 job.show_analysis_chart() <p>Change the scale and display the analysis chart again</p> In\u00a0[\u00a0]: Copied! <pre>job.phases['lbco'].scale = 3\njob.show_analysis_chart()\n</pre> job.phases['lbco'].scale = 3 job.show_analysis_chart() <p>Change the default values of the peak profile related parameters and display the analysis chart again</p> In\u00a0[\u00a0]: Copied! <pre>job.instrument.resolution_u = 0.1\njob.instrument.resolution_v = -0.1\njob.instrument.resolution_w = 0.2\njob.instrument.resolution_x = 0\njob.instrument.resolution_y = 0\njob.show_analysis_chart()\n</pre> job.instrument.resolution_u = 0.1 job.instrument.resolution_v = -0.1 job.instrument.resolution_w = 0.2 job.instrument.resolution_x = 0 job.instrument.resolution_y = 0 job.show_analysis_chart() <p>Select parameters to be refined in the 1st round</p> In\u00a0[\u00a0]: Copied! <pre>job.phases['lbco'].scale.free = True\njob.phases['lbco'].cell.length_a.free = True\njob.pattern.zero_shift.free = True\njob.pattern.backgrounds[0][0].y.free = True\njob.pattern.backgrounds[0][1].y.free = True\n</pre> job.phases['lbco'].scale.free = True job.phases['lbco'].cell.length_a.free = True job.pattern.zero_shift.free = True job.pattern.backgrounds[0][0].y.free = True job.pattern.backgrounds[0][1].y.free = True <p>Print parameters to be refined (free parameters) before fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() In\u00a0[\u00a0]: Copied! <pre>job.get_fit_parameters()\n</pre> job.get_fit_parameters() <p>Start Least-Squares minimization to refine the selected parameters</p> In\u00a0[\u00a0]: Copied! <pre>job.fit()\n</pre> job.fit() <p>Print the refined parameters after fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() <p>Display the analysis chart after the 1st fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Select more parameters to be refined in the 2nd round</p> In\u00a0[\u00a0]: Copied! <pre>job.instrument.resolution_u.free = True\njob.instrument.resolution_v.free = True\njob.instrument.resolution_w.free = True\njob.instrument.resolution_y.free = True\n</pre> job.instrument.resolution_u.free = True job.instrument.resolution_v.free = True job.instrument.resolution_w.free = True job.instrument.resolution_y.free = True <p>Print free parameters before the 2nd fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() <p>Start 2nd round of minimization</p> In\u00a0[\u00a0]: Copied! <pre>job.fit()\n</pre> job.fit() <p>Print free parameters after the 2nd fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() <p>Display the analysis chart after the 2nd fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Select atomic displacement parameters (ADPs) to be refined in the 3rd round</p> In\u00a0[\u00a0]: Copied! <pre>job.phases['lbco'].atom_sites['La'].b_iso_or_equiv.free = True\njob.phases['lbco'].atom_sites['Ba'].b_iso_or_equiv.free = True\njob.phases['lbco'].atom_sites['Co'].b_iso_or_equiv.free = True\njob.phases['lbco'].atom_sites['O'].b_iso_or_equiv.free = True\n</pre> job.phases['lbco'].atom_sites['La'].b_iso_or_equiv.free = True job.phases['lbco'].atom_sites['Ba'].b_iso_or_equiv.free = True job.phases['lbco'].atom_sites['Co'].b_iso_or_equiv.free = True job.phases['lbco'].atom_sites['O'].b_iso_or_equiv.free = True <p>Print free parameters before the 3rd fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() <p>Start 3rd round of minimization</p> In\u00a0[\u00a0]: Copied! <pre>job.fit()\n</pre> job.fit() <p>Print free parameters after the 3rd fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() <p>Display the analysis chart after the 3rd fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Show all parameters after refinement</p> In\u00a0[\u00a0]: Copied! <pre>job.show_parameters()\n</pre> job.show_parameters()"},{"location":"examples/Fitting_PD-NEUT-CW_LBCO-HRPT/#fitting-pd-neut-cw-lbco-hrpt","title":"Fitting <code>PD-NEUT-CW</code> LBCO-HRPT\u00b6","text":"<p>This example shows how to refine the crystal structure parameters of La0.5Ba0.5CoO3 from neutron diffraction data in a constant wavelength experiment performed on HRPT diffractometer at PSI.</p>"},{"location":"examples/Fitting_PD-NEUT-CW_LBCO-HRPT/#import-easydiffraction","title":"Import EasyDiffraction\u00b6","text":""},{"location":"examples/Fitting_PD-NEUT-CW_LBCO-HRPT/#job","title":"Job\u00b6","text":"<p>Create a job \u2014 the main object to store all the information</p>"},{"location":"examples/Fitting_PD-NEUT-CW_LBCO-HRPT/#model","title":"Model\u00b6","text":"<p>Download the CIF file from the EasyDiffraction repository on GitHub</p>"},{"location":"examples/Fitting_PD-NEUT-CW_LBCO-HRPT/#experiment","title":"Experiment\u00b6","text":"<p>Download the data file from the EasyDiffraction repository on GitHub</p>"},{"location":"examples/Fitting_PD-NEUT-CW_LBCO-HRPT/#analysis","title":"Analysis\u00b6","text":"<p>Display the analysis chart before setting initial parameter values</p>"},{"location":"examples/Fitting_PD-NEUT-TOF_NCAF-WISH/","title":"NEUT-TOF NCAF-WISH","text":"In\u00a0[\u00a0]: Copied! <pre>import easydiffraction as ed\n</pre> import easydiffraction as ed <p>Create a job \u2014 the main object to store all the information</p> In\u00a0[\u00a0]: Copied! <pre>job = ed.Job(type='tof')\n</pre> job = ed.Job(type='tof') <p>Load a phase from CIF file</p> In\u00a0[\u00a0]: Copied! <pre>job.add_phase_from_file('data/ncaf.cif')\nprint(job.phases)\n</pre> job.add_phase_from_file('data/ncaf.cif') print(job.phases) <p>Show phase info in CIF format</p> In\u00a0[\u00a0]: Copied! <pre>phase = job.phases['ncaf']\nprint(phase.cif)\n</pre> phase = job.phases['ncaf'] print(phase.cif) <p>Display the crystal structure of a given model</p> In\u00a0[\u00a0]: Copied! <pre>job.show_crystal_structure(id='ncaf')\n</pre> job.show_crystal_structure(id='ncaf') In\u00a0[\u00a0]: Copied! <pre>ed.download_from_repository('wish.xye', destination='data')\n</pre> ed.download_from_repository('wish.xye', destination='data') <p>Show content of the downloaded file (first 5 lines)</p> In\u00a0[\u00a0]: Copied! <pre>with open('data/wish.xye') as f:\n    print(''.join(f.readlines()[:5]))\n</pre> with open('data/wish.xye') as f:     print(''.join(f.readlines()[:5])) <p>Load experimentally measured data from downloaded file in XYE format</p> In\u00a0[\u00a0]: Copied! <pre>job.add_experiment_from_file('data/wish.xye')\n</pre> job.add_experiment_from_file('data/wish.xye') <p>Display the experimentally measured data</p> In\u00a0[\u00a0]: Copied! <pre>job.show_experiment_chart()\n</pre> job.show_experiment_chart() <p>Define a point background</p> In\u00a0[\u00a0]: Copied! <pre>background_points = [\n    (  9162, 465),\n    ( 11136, 593),\n    ( 13313, 497),\n    ( 14906, 546),\n    ( 16454, 533),\n    ( 17352, 496),\n    ( 18743, 428),\n    ( 20179, 452),\n    ( 21368, 397),\n    ( 22176, 468),\n    ( 22827, 477),\n    ( 24644, 380),\n    ( 26439, 381),\n    ( 28257, 378),\n    ( 31196, 343),\n    ( 34034, 328),\n    ( 37265, 310),\n    ( 41214, 323),\n    ( 44827, 283),\n    ( 49830, 273),\n    ( 52905, 257),\n    ( 58204, 260),\n    ( 62916, 261),\n    ( 70186, 262),\n    ( 74204, 262),\n    ( 82103, 268),\n    ( 91958, 268),\n    (102712, 262)\n]\njob.set_background(background_points)\n</pre> background_points = [     (  9162, 465),     ( 11136, 593),     ( 13313, 497),     ( 14906, 546),     ( 16454, 533),     ( 17352, 496),     ( 18743, 428),     ( 20179, 452),     ( 21368, 397),     ( 22176, 468),     ( 22827, 477),     ( 24644, 380),     ( 26439, 381),     ( 28257, 378),     ( 31196, 343),     ( 34034, 328),     ( 37265, 310),     ( 41214, 323),     ( 44827, 283),     ( 49830, 273),     ( 52905, 257),     ( 58204, 260),     ( 62916, 261),     ( 70186, 262),     ( 74204, 262),     ( 82103, 268),     ( 91958, 268),     (102712, 262) ] job.set_background(background_points) <p>Display the experiment chart after setting the background</p> In\u00a0[\u00a0]: Copied! <pre>job.show_experiment_chart()\n</pre> job.show_experiment_chart() <p>Display the analysis chart before setting initial parameter values</p> In\u00a0[\u00a0]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Create aliases for the two types of experimental parameters</p> In\u00a0[\u00a0]: Copied! <pre>pattern= job.pattern\ninstrument = job.instrument\n</pre> pattern= job.pattern instrument = job.instrument <p>Change the default value of some instrumental parameters and display the analysis chart again</p> In\u00a0[\u00a0]: Copied! <pre>instrument.dtt1 = 20770\ninstrument.dtt2 = -1.08308\ninstrument.ttheta_bank = 152.827\njob.show_analysis_chart()\n</pre> instrument.dtt1 = 20770 instrument.dtt2 = -1.08308 instrument.ttheta_bank = 152.827 job.show_analysis_chart() <p>Change the scale and display the analysis chart again</p> In\u00a0[\u00a0]: Copied! <pre>phase.scale = 0.5\njob.show_analysis_chart()\n</pre> phase.scale = 0.5 job.show_analysis_chart() <p>Change the default values of the peak profile related parameters and display the analysis chart again</p> In\u00a0[\u00a0]: Copied! <pre>instrument.alpha0 = 0\ninstrument.alpha1 = 0.1\ninstrument.beta0 = 0.01\ninstrument.beta1 = 0.01\ninstrument.sigma0 = 0\ninstrument.sigma1 = 0\ninstrument.sigma2 = 5\njob.show_analysis_chart()\n</pre> instrument.alpha0 = 0 instrument.alpha1 = 0.1 instrument.beta0 = 0.01 instrument.beta1 = 0.01 instrument.sigma0 = 0 instrument.sigma1 = 0 instrument.sigma2 = 5 job.show_analysis_chart() <p>Select parameters to be refined in the first round</p> In\u00a0[\u00a0]: Copied! <pre>phase.scale.free = True\npattern.zero_shift.free = True\n</pre> phase.scale.free = True pattern.zero_shift.free = True <p>Print parameters to be refined (free parameters) before fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() <p>Start Least-Squares minimization to refine the selected parameters</p> In\u00a0[\u00a0]: Copied! <pre>job.fit()\n</pre> job.fit() <p>Print the refined parameters after fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() <p>Display the analysis chart after the first fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Select more parameters to be refined in the second round</p> In\u00a0[\u00a0]: Copied! <pre>instrument.alpha1.free = True\ninstrument.beta0.free = True\ninstrument.beta1.free = True\ninstrument.sigma2.free = True\n</pre> instrument.alpha1.free = True instrument.beta0.free = True instrument.beta1.free = True instrument.sigma2.free = True <p>Print free parameters before the second fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() <p>Start the second round of minimization</p> In\u00a0[\u00a0]: Copied! <pre>job.fit()\n</pre> job.fit() <p>Print free parameters after the third fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() <p>Display the analysis chart after the third fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Show all parameters after refinement</p> In\u00a0[\u00a0]: Copied! <pre>job.show_parameters()\n</pre> job.show_parameters()"},{"location":"examples/Fitting_PD-NEUT-TOF_NCAF-WISH/#fitting-pd-neut-tof-ncaf-wish","title":"Fitting <code>PD-NEUT-TOF</code> NCAF-WISH\u00b6","text":"<p>This example shows how to refine the crystal structure parameters of Si from neutron diffraction data in a time-of-flight experiment performed on SEPD diffractometer at Argonne.</p>"},{"location":"examples/Fitting_PD-NEUT-TOF_NCAF-WISH/#import-easydiffraction","title":"Import EasyDiffraction\u00b6","text":""},{"location":"examples/Fitting_PD-NEUT-TOF_NCAF-WISH/#job","title":"Job\u00b6","text":""},{"location":"examples/Fitting_PD-NEUT-TOF_NCAF-WISH/#model","title":"Model\u00b6","text":""},{"location":"examples/Fitting_PD-NEUT-TOF_NCAF-WISH/#experiment","title":"Experiment\u00b6","text":"<p>Download the data file from the EasyDiffraction repository on GitHub</p>"},{"location":"examples/Fitting_PD-NEUT-TOF_NCAF-WISH/#analysis","title":"Analysis\u00b6","text":""},{"location":"examples/Fitting_PD-NEUT-TOF_Si-SEPD/","title":"NEUT-TOF Si-SEPD","text":"In\u00a0[\u00a0]: Copied! <pre>import easydiffraction as ed\n</pre> import easydiffraction as ed <p>Create a job \u2014 the main object to store all the information</p> In\u00a0[\u00a0]: Copied! <pre>job = ed.Job(type='tof')\n</pre> job = ed.Job(type='tof') In\u00a0[\u00a0]: Copied! <pre>phase = ed.Phase(name='si')\n</pre> phase = ed.Phase(name='si') <p>Set space group</p> In\u00a0[\u00a0]: Copied! <pre>phase.space_group.name_hm_alt = 'F d -3 m'\n</pre> phase.space_group.name_hm_alt = 'F d -3 m' <p>Set cell parameters</p> In\u00a0[\u00a0]: Copied! <pre>phase.cell.length_a = 5.43146\n</pre> phase.cell.length_a = 5.43146 <p>Add atoms</p> In\u00a0[\u00a0]: Copied! <pre>phase.atom_sites.append(label='Si',\n                        type_symbol='Si',\n                        fract_x=0,\n                        fract_y=0,\n                        fract_z=0,\n                        occupancy=1,\n                        b_iso_or_equiv=0.529)\n</pre> phase.atom_sites.append(label='Si',                         type_symbol='Si',                         fract_x=0,                         fract_y=0,                         fract_z=0,                         occupancy=1,                         b_iso_or_equiv=0.529) <p>Add phase to the job object</p> In\u00a0[\u00a0]: Copied! <pre>job.add_phase(phase=phase)\nprint(job.phases)\n</pre> job.add_phase(phase=phase) print(job.phases) <p>Show phase info in CIF format</p> In\u00a0[\u00a0]: Copied! <pre>phase = job.phases['si']\nprint(phase.cif)\n</pre> phase = job.phases['si'] print(phase.cif) <p>Display the crystal structure of a given model</p> In\u00a0[\u00a0]: Copied! <pre>job.show_crystal_structure(id='si')\n</pre> job.show_crystal_structure(id='si') In\u00a0[\u00a0]: Copied! <pre>ed.download_from_repository('sepd.xye', destination='data')\n</pre> ed.download_from_repository('sepd.xye', destination='data') <p>Show content of the downloaded file (first 5 lines)</p> In\u00a0[\u00a0]: Copied! <pre>with open('data/sepd.xye') as f:\n    print(''.join(f.readlines()[:5]))\n</pre> with open('data/sepd.xye') as f:     print(''.join(f.readlines()[:5])) <p>Load experimentally measured data from a file in XYE format</p> In\u00a0[\u00a0]: Copied! <pre>job.add_experiment_from_file('data/sepd.xye')\n</pre> job.add_experiment_from_file('data/sepd.xye') <p>Display the experimentally measured data</p> In\u00a0[\u00a0]: Copied! <pre>job.show_experiment_chart(show_legend=False)\n</pre> job.show_experiment_chart(show_legend=False) <p>Define a point background</p> In\u00a0[\u00a0]: Copied! <pre>background_points = [(x, 200) for x in range(0, 35000, 5000)]\nprint(background_points)\n</pre> background_points = [(x, 200) for x in range(0, 35000, 5000)] print(background_points) In\u00a0[\u00a0]: Copied! <pre>job.set_background(background_points)\n</pre> job.set_background(background_points) <p>Display the experiment chart after setting the background</p> In\u00a0[\u00a0]: Copied! <pre>job.show_experiment_chart()\n</pre> job.show_experiment_chart() <p>Display the analysis chart before setting initial parameter values</p> In\u00a0[\u00a0]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Create aliases for the two types of experimental parameters</p> In\u00a0[\u00a0]: Copied! <pre>pattern_params = job.pattern\nexperiment_params = job.parameters\n</pre> pattern_params = job.pattern experiment_params = job.parameters <p>Change the default value of some instrumental parameters and display the analysis chart again</p> In\u00a0[\u00a0]: Copied! <pre>experiment_params.dtt1 = 7476.91\nexperiment_params.dtt2 = -1.54\nexperiment_params.ttheta_bank = 144.845\njob.show_analysis_chart()\n</pre> experiment_params.dtt1 = 7476.91 experiment_params.dtt2 = -1.54 experiment_params.ttheta_bank = 144.845 job.show_analysis_chart() <p>Change the scale and display the analysis chart again</p> In\u00a0[\u00a0]: Copied! <pre>phase.scale = 10\njob.show_analysis_chart()\n</pre> phase.scale = 10 job.show_analysis_chart() <p>Change the default values of the peak profile related parameters and display the analysis chart again</p> In\u00a0[\u00a0]: Copied! <pre>experiment_params.alpha0 = 0.024\nexperiment_params.alpha1 = 0.204\nexperiment_params.beta0 = 0.038\nexperiment_params.beta1 = 0.011\nexperiment_params.sigma0 = 0.0\nexperiment_params.sigma1 = 0.0\nexperiment_params.sigma2 = 0.0\njob.show_analysis_chart()\n</pre> experiment_params.alpha0 = 0.024 experiment_params.alpha1 = 0.204 experiment_params.beta0 = 0.038 experiment_params.beta1 = 0.011 experiment_params.sigma0 = 0.0 experiment_params.sigma1 = 0.0 experiment_params.sigma2 = 0.0 job.show_analysis_chart() <p>Select parameters to be refined in the first round</p> In\u00a0[\u00a0]: Copied! <pre>phase.scale.free = True\npattern_params.zero_shift.free = True\n</pre> phase.scale.free = True pattern_params.zero_shift.free = True <p>Print parameters to be refined (free parameters) before fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() <p>Start Least-Squares minimization to refine the selected parameters</p> In\u00a0[\u00a0]: Copied! <pre>job.fit()\n</pre> job.fit() <p>Print the refined parameters after fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() <p>Display the analysis chart after the first fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Allow background parameters to be refined</p> In\u00a0[\u00a0]: Copied! <pre>for background_point in pattern_params.backgrounds[0]:\n    background_point.y.free = True\n</pre> for background_point in pattern_params.backgrounds[0]:     background_point.y.free = True <p>Print free parameters before the second fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() <p>Start second round of minimization</p> In\u00a0[\u00a0]: Copied! <pre>job.fit()\n</pre> job.fit() <p>Print free parameters after the second fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() <p>Display the analysis chart after the second fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Select more parameters to be refined in the third round</p> In\u00a0[\u00a0]: Copied! <pre>experiment_params.sigma0.free = True\nexperiment_params.sigma1.free = True\nexperiment_params.sigma2.free = True\n</pre> experiment_params.sigma0.free = True experiment_params.sigma1.free = True experiment_params.sigma2.free = True <p>Disable refinement of background parameters</p> In\u00a0[\u00a0]: Copied! <pre>for background_point in pattern_params.backgrounds[0]:\n    background_point.y.free = False\n</pre> for background_point in pattern_params.backgrounds[0]:     background_point.y.free = False <p>Print free parameters before the third fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() <p>Start third round of minimization</p> In\u00a0[\u00a0]: Copied! <pre>job.fit()\n</pre> job.fit() <p>Print free parameters after the third fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() <p>Display the analysis chart after the third fitting</p> In\u00a0[\u00a0]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart()"},{"location":"examples/Fitting_PD-NEUT-TOF_Si-SEPD/#fitting-pd-neut-tof-si-sepd","title":"Fitting <code>PD-NEUT-TOF</code> Si-SEPD\u00b6","text":"<p>This example shows how to refine the crystal structure parameters of Si from neutron diffraction data in a time-of-flight experiment performed on SEPD diffractometer at Argonne.</p>"},{"location":"examples/Fitting_PD-NEUT-TOF_Si-SEPD/#import-easydiffraction","title":"Import EasyDiffraction\u00b6","text":""},{"location":"examples/Fitting_PD-NEUT-TOF_Si-SEPD/#job","title":"Job\u00b6","text":""},{"location":"examples/Fitting_PD-NEUT-TOF_Si-SEPD/#model","title":"Model\u00b6","text":"<p>Create a phase object</p>"},{"location":"examples/Fitting_PD-NEUT-TOF_Si-SEPD/#experiment","title":"Experiment\u00b6","text":"<p>Download the data file from the EasyDiffraction repository on GitHub</p>"},{"location":"examples/Fitting_PD-NEUT-TOF_Si-SEPD/#analysis","title":"Analysis\u00b6","text":""},{"location":"experiment/non-cif-data/","title":"Non-CIF data","text":""},{"location":"experiment/non-cif-data/#other-supported-data-files","title":"Other supported data files","text":"<p>If you do not have a CIF file with both the instrumental parameters and measured data, as in the example (hrpt.cif) from the previous section, you can import only measured data. In that case, the data are then automatically converted into CIF with default parameters. These can be later edited in the code.</p> <p>The following measured data formats are supported:</p> <ul> <li>If standard deviations of measured intensities are present, the file should have either <code>*.xye</code> or <code>*.xys</code> extension and contain the following 3 columns: _pd_meas.2theta_scan, _pd_meas.intensity_total and _pd_meas.intensity_total_su.</li> <li>If standard deviations of measured intensities are not given, the file should have <code>*.xy</code> extension and contain the following 2 columns: _pd_meas.2theta_scan and _pd_meas.intensity_total. In this case, the _pd_meas.intensity_total_su is calculated as the square root of _pd_meas.intensity_total.</li> </ul> <p>Optional comments with <code>#</code> are possible in data file headers.</p> <p>Here are some examples:</p>"},{"location":"experiment/non-cif-data/#example1xye","title":"example1.xye","text":"<pre><code>#  2theta  intensity   su\n   10.00     167      12.6\n   10.05     157      12.5\n   10.10     187      13.3\n   10.15     197      14.0\n   10.20     164      12.5\n  ...\n  164.65     173      30.1\n  164.70     187      27.9\n  164.75     175      38.2\n  164.80     168      30.9\n  164.85     109      41.2\n</code></pre>"},{"location":"experiment/non-cif-data/#example2xy","title":"example2.xy","text":"<pre><code>#  2theta  intensity\n   10.00     167    \n   10.05     157    \n   10.10     187    \n   10.15     197    \n   10.20     164    \n  ...\n  164.65     173    \n  164.70     187    \n  164.75     175    \n  164.80     168    \n  164.85     109    \n</code></pre>"},{"location":"experiment/non-cif-data/#example3xy","title":"example3.xy","text":"<pre><code>10  167.3    \n10.05  157.4    \n10.1  187.1    \n10.15  197.8    \n10.2  164.9    \n...\n164.65  173.3    \n164.7  187.5    \n164.75  175.8    \n164.8  168.1    \n164.85  109    \n</code></pre>"},{"location":"experiment/types/","title":"Experiment types","text":"<p>The following examples show the data blocks for different types of diffraction experiments.</p>"},{"location":"experiment/types/#pd-neut-cwl","title":"pd-neut-cwl","text":"<pre><code>data_hrpt\n\n_diffrn_radiation.probe neutron\n\n_diffrn_radiation_wavelength.wavelength 1.494\n\n_pd_calib.2theta_offset  0.6225(4)\n\n_pd_instr.resolution_u  0.0834\n_pd_instr.resolution_v -0.1168\n_pd_instr.resolution_w  0.123\n_pd_instr.resolution_x  0\n_pd_instr.resolution_y  0.0797\n\n_pd_instr.reflex_asymmetry_p1 0\n_pd_instr.reflex_asymmetry_p2 0\n_pd_instr.reflex_asymmetry_p3 0\n_pd_instr.reflex_asymmetry_p4 0\n\nloop_\n_pd_phase_block.id\n_pd_phase_block.scale\nlbco 9.0976(3)\n\nloop_\n_pd_background.line_segment_X\n_pd_background.line_segment_intensity\n_pd_background.X_coordinate\n 10  174.3  2theta\n 20  159.8  2theta\n 30  167.9  2theta\n 50  166.1  2theta\n 70  172.3  2theta\n 90  171.1  2theta\n110  172.4  2theta\n130  182.5  2theta\n150  173.0  2theta\n165  171.1  2theta\n\nloop_\n_pd_meas.2theta_scan\n_pd_meas.intensity_total\n_pd_meas.intensity_total_su\n 10.00  167  12.6\n 10.05  157  12.5\n 10.10  187  13.3\n 10.15  197  14.0\n 10.20  164  12.5\n 10.25  171  13.0\n...\n164.60  153  20.7\n164.65  173  30.1\n164.70  187  27.9\n164.75  175  38.2\n164.80  168  30.9\n164.85  109  41.2\n</code></pre>"},{"location":"experiment/types/#pd-neut-tof","title":"pd-neut-tof","text":"<pre><code>data_wish\n\n_diffrn_radiation.probe neutron\n\n_pd_instr.2theta_bank 152.827\n\n_pd_instr.dtt1 20773.1(3)\n_pd_instr.dtt2    -1.08308\n_pd_instr.zero   -13.7(5)\n\n_pd_instr.alpha0 -0.009(1)\n_pd_instr.alpha1  0.109(2)\n_pd_instr.beta0   0.00670(3)\n_pd_instr.beta1   0.0100(3)\n_pd_instr.sigma0  0\n_pd_instr.sigma1  0\n_pd_instr.sigma2 15.7(8)\n\nloop_\n_pd_phase_block.id\n_pd_phase_block.scale\nncaf 1.093(5)\n\nloop_\n_pd_background.line_segment_X\n_pd_background.line_segment_intensity\n_pd_background.X_coordinate\n  9162.3  465(38) time-of-flight\n 11136.8  593(30) time-of-flight\n 14906.5  546(18) time-of-flight\n 17352.2  496(14) time-of-flight\n 20179.5  452(10) time-of-flight\n 22176.0  468(12) time-of-flight\n 24644.7  380(6)  time-of-flight\n 28257.2  378(4)  time-of-flight\n 34034.4  328(4)  time-of-flight\n 41214.6  323(3)  time-of-flight\n 49830.9  273(3)  time-of-flight\n 58204.9  260(4)  time-of-flight\n 70186.9  262(5)  time-of-flight\n 82103.2  268(5)  time-of-flight\n102712.0  262(15) time-of-flight\n\nloop_\n_pd_meas.time_of_flight\n_pd_meas.intensity_total\n_pd_meas.intensity_total_su\n  9001.0  616.523  124.564\n  9006.8  578.769  123.141\n  9012.6  574.184  120.507\n  9018.5  507.739  111.300\n  9024.3  404.672  101.616\n  9030.1  469.244  107.991\n...\n103085.0  275.072   60.978\n103151.4  214.187   55.675\n103217.9  256.211   62.825\n103284.4  323.872   73.082\n103351.0  242.382   65.736\n103417.6  277.666   73.837\n</code></pre>"},{"location":"experiment/types/#sc-neut-cwl","title":"sc-neut-cwl","text":"<pre><code>data_heidi\n\n_diffrn_radiation.probe neutron\n\n_diffrn_radiation_wavelength.wavelength 0.793\n\nloop_\n_exptl_crystal.id\n_exptl_crystal.scale\ntbti 2.92(6)\n\nloop_\n_refln.index_h\n_refln.index_k\n_refln.index_l\n_refln.intensity_meas\n_refln.intensity_meas_su\n 1  1  1   194.5677    2.3253\n 2  2  0    22.6319    1.1233\n 3  1  1    99.2917    2.5620\n 2  2  2   219.2877    3.2522\n...\n16  8  8    29.3063   12.6552\n17  7  7  1601.5154  628.8915\n13 13  7  1176.0896  414.6018\n19  5  1     0.8334   20.4207\n15  9  9    10.9864    8.0650\n12 12 10    14.4074   11.3800\n</code></pre>"}]}