{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Making diffraction data analysis easy","text":""},{"location":"#about","title":"About","text":"<p>EasyDiffraction is scientific software for calculating neutron powder diffraction patterns based on a structural model and refining its parameters against experimental data.</p> <p>EasyDiffraction is distributed as both a cross-platform desktop application and a Python library.</p> <p>Here you can find instructions for using the EasyDiffraction Python library. Documentation for the EasyDiffraction graphical user interface can be found elsewhere.</p> <p>EasyDiffraction is part of the EasyScience framework, briefly described in the next section.</p>"},{"location":"#license","title":"License","text":"<p>EasyDiffraction is licensed under the BSD 3-Clause License.</p>"},{"location":"#latest-release","title":"Latest release","text":"<p>The latest release of EasyDiffraction Python library is v0.3.0.</p>"},{"location":"analysis/","title":"Analysis","text":"<p>This section contains information about the analysis of diffraction data in EasyDiffraction.</p>"},{"location":"analysis/#model-dependent-analysis","title":"Model-dependent analysis","text":"<p>There are two general approaches to the analysis of data: model-dependent and model-independent. In the following examples, we are going to focus on the former. However, the latter is worth briefly highlighting.</p> <p>A model-independent approach to analysis is where no assumptions are made about the system that is being studied and conclusions are drawn only from the data that has been observed. However, in many applications, it is desirable to include what we think we know about the system, and so model-dependent analysis is used.</p> <p>Model-dependent analysis involves the development of a mathematical model that describes the model dataset that would be found for our system. This mathematical model usually has parameters that are linked to the physics and chemistry of our system. These parameters are varied to optimise the model, using an optimisation algorithm, with respect to the experimental data, i.e., to get the best agreement between the model data and the experimental data.</p> <p>Below is a diagram illustrating this process:</p> <pre><code>flowchart LR\n    a(Propose&lt;br/&gt;model)\n    b(Set/change&lt;br/&gt;model&lt;br/&gt;parameter&lt;br/&gt;values)\n    c(Calculate&lt;br/&gt;model&lt;br/&gt;data)\n    d(Compare&lt;br/&gt;model data to&lt;br/&gt;experimental&lt;br/&gt;data)\n    e(Stop&lt;br/&gt;iteration)\n    a --&gt; b\n    b --&gt; c\n    c --&gt; d\n    d-- Threshold&lt;br/&gt;not&lt;br/&gt;reached --&gt;b\n    d-- Threshold&lt;br/&gt;reached --&gt;e</code></pre> <p>Model-dependent analysis is popular in the analysis of neutron scattering data, and we will use it in the following examples.</p>"},{"location":"analysis/#calculation-engines","title":"Calculation engines","text":"<p>EasyDiffraction is designed to be a flexible and extensible tool for calculating diffraction patterns. It can use different calculation engines to perform the calculations.</p> <p>We currently rely on CrysPy as a calculation engine. CrysPy is a Python library originally developed for analysing polarised neutron diffraction data. It is now evolving into a more general purpose library and covers powders and single crystals, nuclear and (commensurate) magnetic structures, unpolarised neutron and X-ray diffraction.</p> <p>Another calculation engine is CrysFML. This library is a collection of Fortran modules for crystallographic computations. It is used in the software package FullProf, and we are currently working on its integration into EasyDiffraction.</p>"},{"location":"analysis/#minimisation-engines","title":"Minimisation engines","text":"<p>EasyDiffraction uses different third-party libraries to perform the model-dependent analysis.</p> <p>Most of the examples in this section will use the lmfit package, which provides a high-level interface to non-linear optimisation and curve fitting problems for Python. It is one of the tools that can be used to fit models to the experimental data.</p> <p>Another package that can be used for the same purpose is bumps. In addition to traditional optimizers which search for the best minimum they can find in the search space, bumps provides Bayesian uncertainty analysis which explores all viable minima and finds confidence intervals on the parameters based on uncertainty in the measured values.</p>"},{"location":"dictionaries/","title":"Dictionaries","text":"<p>All parameter names used in EasyDiffraction are divided into several dictionaries given below. Each keyword in the dictionaries has one badge showing the corresponding type of dictionary, and can have one or more badges showing the type of experiment to which the keyword belongs.</p>"},{"location":"dictionaries/#crystallographic-information-file","title":"Crystallographic information file","text":"<p>EasyDiffraction input and output files use the simple, human-readable STAR/CIF data format, following the specifications of International Union of Crystallography (IUCr), wherever possible.</p>"},{"location":"dictionaries/#model-dictionary","title":"Model dictionary","text":"<p>This dictionary provides data names for describing model parameters.</p> <p>pd-neut-cwl pd-neut-tof sc-neut-cwl pd-xray</p> <ul> <li>_space_group coreCIF<ul> <li>_space_group.name_H-M_alt coreCIF</li> <li>_space_group.IT_coordinate_system_code coreCIF</li> </ul> </li> <li>_cell coreCIF<ul> <li>_cell.angle_alpha coreCIF</li> <li>_cell.angle_beta coreCIF</li> <li>_cell.angle_gamma coreCIF</li> <li>_cell.length_a coreCIF</li> <li>_cell.length_b coreCIF</li> <li>_cell.length_c coreCIF</li> </ul> </li> <li>_atom_site coreCIF<ul> <li>_atom_site.label coreCIF</li> <li>_atom_site.type_symbol coreCIF</li> <li>_atom_site.fract_x coreCIF</li> <li>_atom_site.fract_y coreCIF</li> <li>_atom_site.fract_z coreCIF</li> <li>_atom_site.occupancy coreCIF</li> <li>_atom_site.ADP_type coreCIF</li> <li>_atom_site.B_iso_or_equiv coreCIF</li> <li>_atom_site.site_symmetry_multiplicity coreCIF</li> <li>_atom_site.Wyckoff_symbol coreCIF</li> </ul> </li> </ul>"},{"location":"dictionaries/#experiment-and-instrument-dictionary","title":"Experiment and instrument dictionary","text":"<p>This dictionary provides data names for describing experimental and instrumental parameters.</p> <p>pd-neut-cwl pd-neut-tof sc-neut-cwl pd-xray</p> <ul> <li>_diffrn_radiation coreCIF<ul> <li>_diffrn_radiation.probe coreCIF</li> </ul> </li> </ul> <p>pd-neut-cwl sc-neut-cwl pd-xray</p> <ul> <li>_diffrn_radiation_wavelength coreCIF<ul> <li>_diffrn_radiation_wavelength.wavelength coreCIF</li> </ul> </li> <li>_pd_background pdCIF<ul> <li>_pd_background.line_segment_X pdCIF</li> <li>_pd_background.line_segment_intensity pdCIF</li> <li>_pd_background.X_coordinate pdCIF</li> </ul> </li> <li>_pd_phase_block pdCIF<ul> <li>_pd_phase_block.id pdCIF</li> <li>_pd_phase_block.scale customCIF</li> </ul> </li> </ul> <p>pd-neut-cwl</p> <ul> <li>_pd_calib pdCIF<ul> <li>_pd_calib.2theta_offset pdCIF</li> </ul> </li> <li>_pd_instr pdCIF<ul> <li>_pd_instr.resolution_u customCIF</li> <li>_pd_instr.resolution_v customCIF</li> <li>_pd_instr.resolution_w customCIF</li> <li>_pd_instr.resolution_x customCIF</li> <li>_pd_instr.resolution_y customCIF</li> <li>_pd_instr.reflex_asymmetry_p1 customCIF</li> <li>_pd_instr.reflex_asymmetry_p2 customCIF</li> <li>_pd_instr.reflex_asymmetry_p3 customCIF</li> <li>_pd_instr.reflex_asymmetry_p4 customCIF</li> </ul> </li> <li>_pd_meas pdCIF<ul> <li>_pd_meas.2theta_scan pdCIF</li> <li>_pd_meas.intensity_total pdCIF</li> <li>_pd_meas.intensity_total_su pdCIF</li> </ul> </li> </ul> <p>pd-neut-tof</p> <ul> <li>_pd_instr pdCIF<ul> <li>_pd_instr.zero customCIF</li> <li>_pd_instr.dtt1 customCIF</li> <li>_pd_instr.dtt2 customCIF</li> <li>_pd_instr.2theta_bank customCIF</li> <li>_pd_instr.alpha0 customCIF</li> <li>_pd_instr.alpha1 customCIF</li> <li>_pd_instr.beta0 customCIF</li> <li>_pd_instr.beta1 customCIF</li> <li>_pd_instr.sigma0 customCIF</li> <li>_pd_instr.sigma1 customCIF</li> <li>_pd_instr.sigma2 customCIF</li> </ul> </li> <li>_pd_meas pdCIF<ul> <li>_pd_meas.time_of_flight pdCIF</li> <li>_pd_meas.intensity_total pdCIF</li> <li>_pd_meas.intensity_total_su pdCIF</li> </ul> </li> </ul> <p>sc-neut-cwl</p> <ul> <li> <p>_extinction customCIF</p> <ul> <li>_extinction.model customCIF</li> <li>_extinction.mosaicity customCIF</li> <li>_extinction.radius customCIF</li> </ul> </li> <li> <p>_exptl_crystal customCIF</p> <ul> <li>_exptl_crystal.id customCIF</li> <li>_exptl_crystal.scale customCIF</li> </ul> </li> </ul>"},{"location":"easyscience/","title":"The EasyScience framework","text":"<p>EasyScience is a framework of software tools that can be used to build experimental data analysis packages. For example, it has already been used in the development of EasyDiffraction and EasyReflectometry. Two more packages are about to be started: EasyImaging (Bragg edge imaging) and EasyDynamics (Quasielastic neutron scattering, QENS).</p> <p>The framework consists of both front- and back-end elements, known as EasyApp and EasyScience, respectively. The front-end provides a shared library of graphical interface elements that can be used to build a graphical user interface. The back-end offers a toolset to perform model-dependent analysis, including the ability to plug-in existing calculation engines.</p> <p>Below is a diagram illustrating the relationship between the modules of the EasyScience framework:</p> <p> EasyDiffractionBkg Diffraction EasyDiffraction EasyDiffractionLib EasyDiffractionApp TechniqueIndependantBkg Generic EasyBackend EasyCore EasyCrystallography EasyFrontend EasyApp EasyReflectometryBkg Reflectometry EasyReflectometry EasyReflectometryLib EasyReflectometryApp </p>"},{"location":"experiment/","title":"Experiment","text":"<p>This section describes different types of experimental data which EasyDiffraction can handle. </p>"},{"location":"experiment/#cif-based-description","title":"CIF-based description","text":"<p>The following examples show the CIF data blocks for different types of diffraction experiments supported in EasyDiffraction.</p>"},{"location":"experiment/#pd-neut-cwl","title":"pd-neut-cwl","text":"<pre>\ndata_hrpt\n\n_diffrn_radiation.probe                 neutron\n_diffrn_radiation_wavelength.wavelength 1.494\n\n_pd_calib.2theta_offset 0.6225(4)\n\n_pd_instr.resolution_u  0.0834\n_pd_instr.resolution_v -0.1168\n_pd_instr.resolution_w  0.123\n_pd_instr.resolution_x  0\n_pd_instr.resolution_y  0.0797\n\n_pd_instr.reflex_asymmetry_p1 0\n_pd_instr.reflex_asymmetry_p2 0\n_pd_instr.reflex_asymmetry_p3 0\n_pd_instr.reflex_asymmetry_p4 0\n\nloop_\n_pd_phase_block.id\n_pd_phase_block.scale\nlbco 9.0976(3)\n\nloop_\n_pd_background.line_segment_X\n_pd_background.line_segment_intensity\n_pd_background.X_coordinate\n 10  174.3  2theta\n 20  159.8  2theta\n 30  167.9  2theta\n 50  166.1  2theta\n 70  172.3  2theta\n 90  171.1  2theta\n110  172.4  2theta\n130  182.5  2theta\n150  173.0  2theta\n165  171.1  2theta\n\nloop_\n_pd_meas.2theta_scan\n_pd_meas.intensity_total\n_pd_meas.intensity_total_su\n 10.00  167  12.6\n 10.05  157  12.5\n 10.10  187  13.3\n 10.15  197  14.0\n 10.20  164  12.5\n 10.25  171  13.0\n...\n164.60  153  20.7\n164.65  173  30.1\n164.70  187  27.9\n164.75  175  38.2\n164.80  168  30.9\n164.85  109  41.2\n</pre>"},{"location":"experiment/#pd-neut-tof","title":"pd-neut-tof","text":"<pre>\ndata_wish\n\n_diffrn_radiation.probe neutron\n\n_pd_instr.2theta_bank 152.827\n\n_pd_instr.dtt1 20773.1(3)\n_pd_instr.dtt2    -1.08308\n_pd_instr.zero   -13.7(5)\n\n_pd_instr.alpha0 -0.009(1)\n_pd_instr.alpha1  0.109(2)\n_pd_instr.beta0   0.00670(3)\n_pd_instr.beta1   0.0100(3)\n_pd_instr.sigma0  0\n_pd_instr.sigma1  0\n_pd_instr.sigma2 15.7(8)\n\nloop_\n_pd_phase_block.id\n_pd_phase_block.scale\nncaf 1.093(5)\n\nloop_\n_pd_background.line_segment_X\n_pd_background.line_segment_intensity\n_pd_background.X_coordinate\n  9162.3  465(38) time-of-flight\n 11136.8  593(30) time-of-flight\n 14906.5  546(18) time-of-flight\n 17352.2  496(14) time-of-flight\n 20179.5  452(10) time-of-flight\n 22176.0  468(12) time-of-flight\n 24644.7  380(6)  time-of-flight\n 28257.2  378(4)  time-of-flight\n 34034.4  328(4)  time-of-flight\n 41214.6  323(3)  time-of-flight\n 49830.9  273(3)  time-of-flight\n 58204.9  260(4)  time-of-flight\n 70186.9  262(5)  time-of-flight\n 82103.2  268(5)  time-of-flight\n102712.0  262(15) time-of-flight\n\nloop_\n_pd_meas.time_of_flight\n_pd_meas.intensity_total\n_pd_meas.intensity_total_su\n  9001.0  616.523  124.564\n  9006.8  578.769  123.141\n  9012.6  574.184  120.507\n  9018.5  507.739  111.300\n  9024.3  404.672  101.616\n  9030.1  469.244  107.991\n...\n103085.0  275.072   60.978\n103151.4  214.187   55.675\n103217.9  256.211   62.825\n103284.4  323.872   73.082\n103351.0  242.382   65.736\n103417.6  277.666   73.837\n</pre>"},{"location":"experiment/#sc-neut-cwl","title":"sc-neut-cwl","text":"<pre>\ndata_heidi\n\n_diffrn_radiation.probe                 neutron\n_diffrn_radiation_wavelength.wavelength 0.793\n\n_pd_calib.2theta_offset 0.6225(4)\n\n_pd_instr.resolution_u  0.0834\n_pd_instr.resolution_v -0.1168\n_pd_instr.resolution_w  0.123\n_pd_instr.resolution_x  0\n_pd_instr.resolution_y  0.0797\n\n_pd_instr.reflex_asymmetry_p1 0\n_pd_instr.reflex_asymmetry_p2 0\n_pd_instr.reflex_asymmetry_p3 0\n_pd_instr.reflex_asymmetry_p4 0\n\nloop_\n_exptl_crystal.id\n_exptl_crystal.scale\ntbti 2.92(6)\n\nloop_\n_refln.index_h\n_refln.index_k\n_refln.index_l\n_refln.intensity_meas\n_refln.intensity_meas_su\n 1  1  1   194.5677    2.3253\n 2  2  0    22.6319    1.1233\n 3  1  1    99.2917    2.5620\n 2  2  2   219.2877    3.2522\n...\n16  8  8    29.3063   12.6552\n17  7  7  1601.5154  628.8915\n13 13  7  1176.0896  414.6018\n19  5  1     0.8334   20.4207\n15  9  9    10.9864    8.0650\n12 12 10    14.4074   11.3800\n</pre>"},{"location":"experiment/#other-supported-data-files","title":"Other supported data files","text":"<p>If you do not have a CIF file with both the instrumental parameters and measured data, as in the example (hrpt.cif) from the previous section, you can import only measured data. In that case, the data are then automatically converted into CIF with default parameters. These can be later edited in the code.</p> <p>The following measured data formats are supported:</p> <ul> <li>If standard deviations of measured intensities are present, the file should have either <code>*.xye</code> or <code>*.xys</code> extension and contain the following 3 columns:<ul> <li>_pd_meas.2theta_scan, </li> <li>_pd_meas.intensity_total, </li> <li>_pd_meas.intensity_total_su.</li> </ul> </li> <li>If standard deviations of measured intensities are not given, the file should have <code>*.xy</code> extension and contain the following 2 columns: <ul> <li>_pd_meas.2theta_scan,</li> <li>_pd_meas.intensity_total. </li> </ul> </li> </ul> <p>In the second case, the standard deviations _pd_meas.intensity_total_su are calculated as the square root of the measured intensities _pd_meas.intensity_total.</p> <p>Optional comments with <code>#</code> are possible in data file headers.</p> <p>Here are some examples:</p>"},{"location":"experiment/#example1xye","title":"example1.xye","text":"<pre>\n# 2theta  intensity    su\n   10.00     167      12.6\n   10.05     157      12.5\n   10.10     187      13.3\n   10.15     197      14.0\n   10.20     164      12.5\n  ...\n  164.65     173      30.1\n  164.70     187      27.9\n  164.75     175      38.2\n  164.80     168      30.9\n  164.85     109      41.2\n</pre>"},{"location":"experiment/#example2xy","title":"example2.xy","text":"<pre>\n# 2theta  intensity\n   10.00     167    \n   10.05     157    \n   10.10     187    \n   10.15     197    \n   10.20     164    \n  ...\n  164.65     173    \n  164.70     187    \n  164.75     175    \n  164.80     168    \n  164.85     109  \n</pre>"},{"location":"experiment/#example3xy","title":"example3.xy","text":"<pre>\n10  167.3    \n10.05  157.4    \n10.1  187.1    \n10.15  197.8    \n10.2  164.9    \n...\n164.65  173.3    \n164.7  187.5    \n164.75  175.8    \n164.8  168.1    \n164.85  109     \n</pre>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#requirements","title":"Requirements","text":"<p>The EasyDiffraction library is developed in Python, so Python must be installed on your system. The library is compatible with Python versions 3.9 through 3.12.</p>"},{"location":"getting-started/#environment-setup","title":"Environment setup optional","text":"<p>We recommend using a virtual environment \u2013 an isolated Python runtime where any packages you install or update are contained within that environment. If you encounter issues, you can simply delete and recreate the environment. Setting it up is straightforward:</p> <ul> <li> <p>Create a new virtual environment with: <pre><code>python3 -m venv venv\n</code></pre></p> </li> <li> <p>Activate the environment with:</p>  macOS Windows Linux <pre><code>. venv/bin/activate\n</code></pre> <pre><code>. venv/Scripts/activate\n</code></pre> <pre><code>. venv/bin/activate\n</code></pre> </li> </ul> <p>Your terminal should now print <code>(venv)</code> before the prompt, which is how you know that you are inside the virtual environment that you just created.</p> <ul> <li>Exit the environment with:   <pre><code>deactivate\n</code></pre></li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#from-pypi","title":"From PyPI recommended","text":"<p>EasyDiffraction is published on the Python Package Index (PyPI) repository and can be installed with the package installer for Python (pip), ideally by using a virtual environment.</p> <p>We recommend installing the latest release of EasyDiffraction with the <code>charts</code> extras, which include optional dependencies used for simplified visualization of charts and tables. This can be especially useful for running the Jupyter Notebook examples. To do so, use the following command: <pre><code>pip install 'easydiffraction[charts]'\n</code></pre></p> <p>If only the core functionality is needed, the library can be installed simply with: <pre><code>pip install easydiffraction\n</code></pre></p> <p>To install a specific version of EasyDiffraction, e.g. 0.1.3, use: <pre><code>pip install 'easydiffraction==0.1.3'\n</code></pre></p> <p>Upgrading to the latest version can be done with: <pre><code>pip install --upgrade --force-reinstall easydiffraction\n</code></pre></p> <p>To show the currently installed version, use: <pre><code>pip show easydiffraction\n</code></pre></p>"},{"location":"getting-started/#from-github","title":"From GitHub","text":"<p>Installing an unreleased version is not recommended and should only be done for testing purposes. </p> <p>Here is an example of how to install EasyDiffraction directly from our GitHub repository, e.g., from the <code>develop</code> branch: <pre><code>pip install git+https://github.com/EasyScience/EasyDiffractionLib@develop\n</code></pre></p> <p>To do the same with extra dependencies, use: <pre><code>pip install 'easydiffraction[charts] @ git+https://github.com/EasyScience/EasyDiffractionLib@develop'\n</code></pre></p>"},{"location":"getting-started/#examples","title":"Examples","text":"<p>We have a collection of Jupyter Notebook examples that demonstrate how to use EasyDiffraction for various tasks. These examples are presented in the How to use section of the documentation as static HTML pages.</p> <p>You can also run these Jupyter Notebook examples yourself either locally or in Google Colab. </p> <p>These Jupyter Notebook examples can be downloaded either one by one from the How to use section or all together as a zip archive from the EasyDiffraction releases.</p>"},{"location":"getting-started/#run-locally","title":"Run locally","text":"<p>To run the examples locally, you need to install Jupyter Notebook or JupyterLab. Here are the steps to take in the case of Jupyter Notebook:</p> <ul> <li>Install Jupyter Notebook:   <pre><code>pip install notebook\n</code></pre></li> <li>Download EasyDiffraction examples from GitHub for the latest release, e.g., using curl:   <pre><code>curl --location --remote-name https://github.com/EasyScience/EasyDiffractionLib/releases/latest/download/examples.zip\n</code></pre></li> <li>Unzip the downloaded archive:   <pre><code>unzip examples.zip\n</code></pre></li> <li>Run Jupyter Notebook server in the <code>examples/</code> directory:   <pre><code>jupyter notebook examples/\n</code></pre></li> <li>Open your web browser and go to:   <pre><code>http://localhost:8888/\n</code></pre></li> <li>Select one of the <code>*.ipynb</code> files.</li> </ul>"},{"location":"getting-started/#via-google-colab","title":"Via Google Colab","text":"<p>Note</p> <p>To run the examples in Google Colab, you need to have a Google account.</p> <p>Google Colab is a free cloud service that allows you to run Jupyter Notebooks online, enabling you to run the examples without installing anything on your local machine.</p> <p>In the top right corner of each example, under the How to use section, you will find a button to open that example in Google Colab </p>"},{"location":"glossary/","title":"Glossary","text":"<p>This page contains the most common abbreviations used in EasyDiffraction documentation.</p>"},{"location":"glossary/#dictionary-type-labels","title":"Dictionary type labels","text":"<ul> <li>coreCIF Core CIF dictionary by the IUCr.</li> <li>pdCIF Powder CIF dictionary by the IUCr.</li> <li>customCIF Custom CIF dictionary by the EasyDiffraction developers.</li> </ul>"},{"location":"glossary/#experiment-type-labels","title":"Experiment type labels","text":""},{"location":"glossary/#neutron-diffraction","title":"Neutron diffraction","text":"<ul> <li>pd-neut-cwl Powder neutron diffraction with constant wavelength.</li> <li>pd-neut-tof Powder neutron diffraction with time-of-flight.</li> <li>sc-neut-cwl Single crystal neutron diffraction with constant wavelength.</li> </ul>"},{"location":"glossary/#x-ray-diffraction","title":"X-ray diffraction","text":"<ul> <li>pd-xray Powder X-ray diffraction.</li> </ul>"},{"location":"model/","title":"Model","text":"<p>EasyDiffraction allow you to load the crystallographic model in CIF format. The model is then used to calculate the diffraction pattern, which is compared to the experimental data. The model parameters can be refined to improve the agreement between the calculated and measured data. </p> <p>An example of the CIF-based model has been given in the Project structure section.</p>"},{"location":"project-structure/","title":"Project structure","text":""},{"location":"project-structure/#cif-based-project-files","title":"CIF-based project files","text":"<p>Example project structure for the constant wavelength powder neutron diffraction measurement is given below:</p> <pre>\nLa0.5Ba0.5CoO3     - Project directory.\n\u251c\u2500\u2500 project.cif    - Main project description file.\n\u251c\u2500\u2500 models         - Folder with individual crystallographic phases.\n\u2502   \u251c\u2500\u2500 lbco.cif   - File with La0.5Ba0.5CoO3 phase parameters.\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 experiments    - Folder with instrumental parameters and measured data.\n\u2502   \u251c\u2500\u2500 hrpt.cif   - Measured data from HRPT@PSI &amp; instrumental parameters.\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 summary\n    \u2514\u2500\u2500 report.cif - Summary report after structure refinement.\n</pre> <p>Here is the content of the project files:</p>"},{"location":"project-structure/#projectcif","title":"project.cif","text":"<pre>\ndata_La0.5Ba0.5CoO3\n\n_project.description \"neutrons, powder, constant wavelength, HRPT@PSI\"\n\nloop_\n_model.cif_file_name\nlbco.cif\n\nloop_\n_experiment.cif_file_name\nhrpt.cif\n</pre>"},{"location":"project-structure/#models-lbcocif","title":"models / lbco.cif","text":"<pre>\ndata_lbco\n\n_space_group.name_H-M_alt              \"P m -3 m\"\n_space_group.IT_coordinate_system_code 1\n\n_cell.length_a      3.8909(1)\n_cell.length_b      3.8909\n_cell.length_c      3.8909\n_cell.angle_alpha  90\n_cell.angle_beta   90\n_cell.angle_gamma  90\n\nloop_\n_atom_site.label\n_atom_site.type_symbol\n_atom_site.fract_x\n_atom_site.fract_y\n_atom_site.fract_z\n_atom_site.occupancy\n_atom_site.adp_type\n_atom_site.B_iso_or_equiv\nLa La   0   0   0     0.5  Biso 0.4958\nBa Ba   0   0   0     0.5  Biso 0.4943\nCo Co   0.5 0.5 0.5   1    Biso 0.2567\nO  O    0   0.5 0.5   1    Biso 1.4041\n</pre>"},{"location":"project-structure/#experiments-hrptcif","title":"experiments / hrpt.cif","text":"<pre>\ndata_hrpt\n\n_diffrn_radiation.probe                 neutron\n_diffrn_radiation_wavelength.wavelength 1.494\n\n_pd_calib.2theta_offset 0.6225(4)\n\n_pd_instr.resolution_u  0.0834\n_pd_instr.resolution_v -0.1168\n_pd_instr.resolution_w  0.123\n_pd_instr.resolution_x  0\n_pd_instr.resolution_y  0.0797\n\n_pd_instr.reflex_asymmetry_p1 0\n_pd_instr.reflex_asymmetry_p2 0\n_pd_instr.reflex_asymmetry_p3 0\n_pd_instr.reflex_asymmetry_p4 0\n\nloop_\n_pd_phase_block.id\n_pd_phase_block.scale\nlbco 9.0976(3)\n\nloop_\n_pd_background.line_segment_X\n_pd_background.line_segment_intensity\n_pd_background.X_coordinate\n 10  174.3  2theta\n 20  159.8  2theta\n 30  167.9  2theta\n 50  166.1  2theta\n 70  172.3  2theta\n 90  171.1  2theta\n110  172.4  2theta\n130  182.5  2theta\n150  173.0  2theta\n165  171.1  2theta\n\nloop_\n_pd_meas.2theta_scan\n_pd_meas.intensity_total\n_pd_meas.intensity_total_su\n 10.00  167  12.6\n 10.05  157  12.5\n 10.10  187  13.3\n 10.15  197  14.0\n 10.20  164  12.5\n 10.25  171  13.0\n...\n164.60  153  20.7\n164.65  173  30.1\n164.70  187  27.9\n164.75  175  38.2\n164.80  168  30.9\n164.85  109  41.2\n</pre>"},{"location":"dictionaries/_atom_site/","title":"atom site","text":"<p>coreCIF</p>"},{"location":"dictionaries/_atom_site/#_atom_site","title":"_atom_site","text":"<p>Data items in this category record details about the atom sites in a crystal structure, such as the positional coordinates and atomic displacement parameters. Please see the IUCr page for further details.</p>"},{"location":"dictionaries/_atom_site/#_atom_sitelabel","title":"_atom_site.label","text":"<p>This is a unique identifier for a particular site in the asymmetric unit of the crystal unit cell.</p>"},{"location":"dictionaries/_atom_site/#_atom_sitetype_symbol","title":"_atom_site.type_symbol","text":"<p>A code to identify the atom specie(s) occupying this site.</p>"},{"location":"dictionaries/_atom_site/#_atom_sitefract","title":"_atom_site.fract","text":"<p>Atom-site coordinates as fractions of the _cell_length values.</p> <ul> <li>_atom_site.fract_x</li> <li>_atom_site.fract_y</li> <li>_atom_site.fract_z</li> </ul>"},{"location":"dictionaries/_atom_site/#_atom_siteoccupancy","title":"_atom_site.occupancy","text":"<p>The fraction of the atom type present at this site.</p>"},{"location":"dictionaries/_atom_site/#_atom_siteadp_type","title":"_atom_site.ADP_type","text":"<p>Code for type of atomic displacement parameters used for the site. Currently only <code>Biso</code> (isotropic B) is supported.</p>"},{"location":"dictionaries/_atom_site/#_atom_siteb_iso_or_equiv","title":"_atom_site.B_iso_or_equiv","text":"<p>Isotropic atomic displacement parameter, or equivalent isotropic atomic displacement parameter, in angstroms squared.</p>"},{"location":"dictionaries/_atom_site/#_atom_sitesite_symmetry_multiplicity","title":"_atom_site.site_symmetry_multiplicity","text":"<p><code>optional parameter</code></p> <p>The number of different sites that are generated by the application of the space-group symmetry to the coordinates given for this site. It is equal to the multiplicity given for this Wyckoff site in International Tables for Crystallography Vol. A (2002).</p>"},{"location":"dictionaries/_atom_site/#_atom_sitewyckoff_symbol","title":"_atom_site.Wyckoff_symbol","text":"<p><code>optional parameter</code></p> <p>The Wyckoff symbol (letter) as listed in the space-group tables of International Tables for Crystallography Vol. A.</p>"},{"location":"dictionaries/_cell/","title":"cell","text":"<p>coreCIF</p>"},{"location":"dictionaries/_cell/#_cell","title":"_cell","text":"<p>Data items in this category record details about the crystallographic cell parameters and their measurement. Please see the IUCr page for further details.</p>"},{"location":"dictionaries/_cell/#_cellangle","title":"_cell.angle","text":"<p>The angles between the bounding cell axes in degrees.</p> <ul> <li>_cell.angle_alpha</li> <li>_cell.angle_beta</li> <li>_cell.angle_gamma</li> </ul>"},{"location":"dictionaries/_cell/#_celllength","title":"_cell.length","text":"<p>The lengths of each cell axis in angstroms.</p> <ul> <li>_cell.length_a</li> <li>_cell.length_b</li> <li>_cell.length_c</li> </ul>"},{"location":"dictionaries/_diffrn_radiation/","title":"diffrn radiation","text":"<p>coreCIF</p>"},{"location":"dictionaries/_diffrn_radiation/#_diffrn_radiation","title":"_diffrn_radiation","text":"<p>Data items in this category describe the radiation used in measuring the diffraction intensities. Please see the IUCr page for further details.</p>"},{"location":"dictionaries/_diffrn_radiation/#_diffrn_radiationprobe","title":"_diffrn_radiation.probe","text":"<p>The nature of the radiation used (i.e. the name of the subatomic particle or the region of the electromagnetic spectrum).</p> <p>Supported values: <code>neutron</code> and <code>x-ray</code></p>"},{"location":"dictionaries/_diffrn_radiation_wavelength/","title":"diffrn radiation wavelength","text":"<p>coreCIF</p>"},{"location":"dictionaries/_diffrn_radiation_wavelength/#_diffrn_radiation_wavelength","title":"_diffrn_radiation_wavelength","text":"<p>Data items in this category describe the wavelength of radiation used in diffraction measurements. Please see the IUCr page for further details.</p>"},{"location":"dictionaries/_diffrn_radiation_wavelength/#_diffrn_radiation_wavelengthwavelength","title":"_diffrn_radiation_wavelength.wavelength","text":"<p>Wavelength of the radiation used to measure the unit cell.</p>"},{"location":"dictionaries/_exptl_crystal/","title":"exptl crystal","text":"<p>customCIF</p>"},{"location":"dictionaries/_extinction/","title":"extinction","text":"<p>customCIF</p>"},{"location":"dictionaries/_pd_background/","title":"pd background","text":"<p>pdCIF</p>"},{"location":"dictionaries/_pd_background/#_pd_background","title":"_pd_background","text":"<p>This category defines various background functions that could be used when calculating diffractograms. Please see the IUCr page for further details.</p>"},{"location":"dictionaries/_pd_background/#_pd_backgroundline_segment_x","title":"_pd_background.line_segment_X","text":"<p>List of X-coordinates used to create many straight-line segments representing the background in a calculated diffractogram.</p> <p>Supported values: <code>2theta</code> and <code>time-of-flight</code></p>"},{"location":"dictionaries/_pd_background/#_pd_backgroundline_segment_intensity","title":"_pd_background.line_segment_intensity","text":"<p>List of intensities used to create many straight-line segments representing the background in a calculated diffractogram.</p>"},{"location":"dictionaries/_pd_background/#_pd_backgroundx_coordinate","title":"_pd_background.X_coordinate","text":"<p>The type of X-coordinate against which the pd_background values were calculated.</p>"},{"location":"dictionaries/_pd_calib/","title":"pd calib","text":"<p>customCIF</p>"},{"location":"dictionaries/_pd_calib/#_pd_calib","title":"_pd_calib","text":"<p>This section defines the parameters used for the calibration of the instrument, similar to this IUCr section.</p>"},{"location":"dictionaries/_pd_calib/#_pd_calib2theta_offset","title":"_pd_calib.2theta_offset","text":"<p>An offset angle (in degrees) used to calibrate 2\u03b8.</p>"},{"location":"dictionaries/_pd_instr/","title":"pd instr","text":"<p>customCIF</p>"},{"location":"dictionaries/_pd_instr/#_pd_instr","title":"_pd_instr","text":"<p>This section contains information relevant to the instrument used for the diffraction measurement, similar to this IUCr section.</p>"},{"location":"dictionaries/_pd_instr/#_pd_instrresolution","title":"_pd_instr.resolution","text":"<p>In general, the profile of a Bragg reflection centred at the peak position can be approximated by mathematical convolution of contributions from the instrument, called the instrumental resolution function, and from the microstructure of the sample. Because many contributions to powder diffraction peaks have a nearly Gaussian or Lorentzian shape, the pseudo-Voigt function, is widely used to describe peak profiles in powder diffraction.</p> <p>Half-width parameters (normally characterising the instrumental resolution function) as implemented in CrysPy:</p> <ul> <li>_pd_instr.resolution_u</li> <li>_pd_instr.resolution_v</li> <li>_pd_instr.resolution_w</li> </ul> <p>Lorentzian isotropic microstrain parameter as implemented in CrysPy:</p> <ul> <li>_pd_instr.resolution_x</li> </ul> <p>Lorentzian isotropic particle size parameteras implemented in CrysPy:</p> <ul> <li>_pd_instr.resolution_y</li> </ul>"},{"location":"dictionaries/_pd_instr/#_pd_instrreflex_asymmetry","title":"_pd_instr.reflex_asymmetry","text":"<p>Peak profile asymmetry parameters as implemented in CrysPy.</p> <ul> <li>_pd_instr.reflex_asymmetry_p1</li> <li>_pd_instr.reflex_asymmetry_p2</li> <li>_pd_instr.reflex_asymmetry_p3</li> <li>_pd_instr.reflex_asymmetry_p4</li> </ul>"},{"location":"dictionaries/_pd_instr/#_pd_instr2theta_bank","title":"_pd_instr.2theta_bank","text":"<p>Time-of-flight parameters as implemented in CrysPy.</p>"},{"location":"dictionaries/_pd_instr/#_pd_instrdtt","title":"_pd_instr.dtt","text":"<p>Time-of-flight parameters as implemented in CrysPy.</p> <ul> <li>_pd_instr.dtt1</li> <li>_pd_instr.dtt2</li> </ul>"},{"location":"dictionaries/_pd_instr/#_pd_instrzero","title":"_pd_instr.zero","text":"<p>Time-of-flight parameters as implemented in CrysPy.</p>"},{"location":"dictionaries/_pd_instr/#_pd_instralpha","title":"_pd_instr.alpha","text":"<p>Time-of-flight parameters as implemented in CrysPy.</p> <ul> <li>_pd_instr.alpha0</li> <li>_pd_instr.alpha1</li> </ul>"},{"location":"dictionaries/_pd_instr/#_pd_instrbeta","title":"_pd_instr.beta","text":"<p>Time-of-flight parameters as implemented in CrysPy.</p> <ul> <li>_pd_instr.beta0</li> <li>_pd_instr.beta1</li> </ul>"},{"location":"dictionaries/_pd_instr/#_pd_instrsigma","title":"_pd_instr.sigma","text":"<p>Time-of-flight parameters as implemented in CrysPy.</p> <ul> <li>_pd_instr.sigma0</li> <li>_pd_instr.sigma1</li> <li>_pd_instr.sigma2</li> </ul>"},{"location":"dictionaries/_pd_meas/","title":"pd meas","text":"<p>pdCIF</p>"},{"location":"dictionaries/_pd_meas/#_pd_meas","title":"_pd_meas","text":"<p>This section contains the measured diffractogram, similar to this IUCr section.</p>"},{"location":"dictionaries/_pd_meas/#_pd_meas2theta_scan","title":"_pd_meas.2theta_scan","text":"<p>2\u03b8 diffraction angle (in degrees) for intensity points measured in a scanning method.</p>"},{"location":"dictionaries/_pd_meas/#_pd_meastime-of-flight","title":"_pd_meas.time-of-flight","text":"<p>Measured time (in microseconds) for time-of-flight neutron measurements.</p>"},{"location":"dictionaries/_pd_meas/#_pd_measintensity_total","title":"_pd_meas.intensity_total","text":"<p>Intensity recorded at each measurement point as a function of angle.</p>"},{"location":"dictionaries/_pd_meas/#_pd_measintensity_total_su","title":"_pd_meas.intensity_total_su","text":"<p>Standard uncertainty of _pd_meas.2theta_scan.</p>"},{"location":"dictionaries/_pd_phase/","title":"pd phase","text":"<p>pdCIF</p>"},{"location":"dictionaries/_pd_phase/#_pd_phase_block","title":"_pd_phase_block","text":"<p>A table of phases relevant to the current data block. Each phase is identified by its data block identifier. Please see the IUCr page for further details.</p>"},{"location":"dictionaries/_pd_phase/#_pd_phase_blockid","title":"_pd_phase_block.id","text":"<p>A block ID code identifying a block containing phase information.</p>"},{"location":"dictionaries/_pd_phase/#_pd_phase_blockscale","title":"_pd_phase_block.scale","text":"<p>Phase scale.</p>"},{"location":"dictionaries/_space_group/","title":"space group","text":"<p>coreCIF</p>"},{"location":"dictionaries/_space_group/#_space_group","title":"_space_group","text":"<p>Contains all the data items that refer to the space group as a whole. Please see the IUCr page for further details.</p>"},{"location":"dictionaries/_space_group/#_space_groupname_h-m_alt","title":"_space_group.name_H-M_alt","text":"<p>The international Hermann-Mauguin space-group symbol as defined in International Tables for Crystallography Volume A. It allows any Hermann-Mauguin symbol to be given.</p>"},{"location":"dictionaries/_space_group/#_space_groupit_coordinate_system_code","title":"_space_group.IT_coordinate_system_code","text":"<p>A qualifier taken from the enumeration list identifying which setting in International Tables for Crystallography Volume A (2002) (IT) is used.</p>"},{"location":"examples/Change-minimizer/","title":"Change minimizer","text":"In\u00a0[2]: Copied! <pre>import easydiffraction as ed\n</pre> import easydiffraction as ed <p>Create a job \u2014 the main object to store all the information</p> In\u00a0[3]: Copied! <pre>job = ed.Job()\n</pre> job = ed.Job() In\u00a0[4]: Copied! <pre>ed.download_from_repository('lbco_adp.cif', destination='data')\n</pre> ed.download_from_repository('lbco_adp.cif', destination='data') <p>Load a phase from the downloaded CIF file</p> In\u00a0[5]: Copied! <pre>job.add_phase_from_file('data/lbco_adp.cif')\nprint(job.phases)\n</pre> job.add_phase_from_file('data/lbco_adp.cif') print(job.phases) <pre>Collection of 1 phases: ['lbco']\n</pre> <p>Show phase info in CIF format</p> In\u00a0[6]: Copied! <pre>phase = job.phases['lbco']\nprint(phase.cif)\n</pre> phase = job.phases['lbco'] print(phase.cif) <pre>data_lbco\n_cell_length_a 3.89\n_cell_length_b 3.89\n_cell_length_c 3.89\n_cell_angle_alpha 90.00000000\n_cell_angle_beta 90.00000000\n_cell_angle_gamma 90.00000000\n_space_group_name_H-M_ref 'P m -3 m'\n_space_group_IT_coordinate_system_code 1\n\nloop_\n_atom_site_label\n_atom_site_type_symbol\n_atom_site_fract_x\n_atom_site_fract_y\n_atom_site_fract_z\n_atom_site_occupancy\n_atom_site_adp_type\n_atom_site_B_iso_or_equiv\nLa La 0.00000000 0.00000000 0.00000000 0.5 Biso 0.4958\nBa Ba 0.00000000 0.00000000 0.00000000 0.5 Biso 0.4943\nCo Co 0.5 0.5 0.5 1.00000000 Biso 0.2567\nO O 0.00000000 0.5 0.5 1.00000000 Biso 1.4041\n</pre> <p>Display the crystal structure of a given model</p> In\u00a0[7]: Copied! <pre>job.show_crystal_structure(id='lbco')\n</pre> job.show_crystal_structure(id='lbco') <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> In\u00a0[8]: Copied! <pre>ed.download_from_repository('hrpt.xye', destination='data')\n</pre> ed.download_from_repository('hrpt.xye', destination='data') <p>Show content of the downloaded file (first 6 lines)</p> In\u00a0[9]: Copied! <pre>with open('data/hrpt.xye') as f:\n    print(''.join(f.readlines()[:6]))\n</pre> with open('data/hrpt.xye') as f:     print(''.join(f.readlines()[:6])) <pre>#  2theta intensity   su\n   10.00    167.00   12.60\n   10.05    157.00   12.50\n   10.10    187.00   13.30\n   10.15    197.00   14.00\n   10.20    164.00   12.50\n\n</pre> <p>Load experimentally measured data from a file in XYE format</p> In\u00a0[10]: Copied! <pre>job.add_experiment_from_file('data/hrpt.xye')\n</pre> job.add_experiment_from_file('data/hrpt.xye') <p>Display the experimentally measured data</p> In\u00a0[11]: Copied! <pre>job.show_experiment_chart()\n</pre> job.show_experiment_chart() <p>Define a point background</p> In\u00a0[12]: Copied! <pre>background_points = [(10.0, 170),\n                    (165.0, 170)]\n\njob.set_background(background_points)\n</pre> background_points = [(10.0, 170),                     (165.0, 170)]  job.set_background(background_points) <p>Display the experiment chart after setting the background</p> In\u00a0[13]: Copied! <pre>job.show_experiment_chart()\n</pre> job.show_experiment_chart() In\u00a0[14]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Create aliases for the two types of experimental parameters</p> In\u00a0[15]: Copied! <pre>pattern = job.pattern\ninstrument = job.instrument\n</pre> pattern = job.pattern instrument = job.instrument <p>Change the default value of the wavelength used in the experiment and display the analysis chart again</p> In\u00a0[16]: Copied! <pre>instrument.wavelength = 1.494\njob.show_analysis_chart()\n</pre> instrument.wavelength = 1.494 job.show_analysis_chart() <p>Select parameters to be refined</p> In\u00a0[17]: Copied! <pre>phase.scale.free = True\nphase.cell.length_a.free = True\npattern.zero_shift.free = True\ninstrument.resolution_u.free = True\ninstrument.resolution_v.free = True\ninstrument.resolution_w.free = True\ninstrument.resolution_y.free = True\n</pre> phase.scale.free = True phase.cell.length_a.free = True pattern.zero_shift.free = True instrument.resolution_u.free = True instrument.resolution_v.free = True instrument.resolution_w.free = True instrument.resolution_y.free = True <p>Set the initial values of the parameters to be refined and display the analysis chart again</p> In\u00a0[18]: Copied! <pre>phase.scale = 6\nphase.cell.length_a = 3.88\npattern.zero_shift = 0.3\ninstrument.resolution_u = 0.1\ninstrument.resolution_v = -0.1\ninstrument.resolution_w = 0.1\ninstrument.resolution_y = 0\njob.show_analysis_chart()\n</pre> phase.scale = 6 phase.cell.length_a = 3.88 pattern.zero_shift = 0.3 instrument.resolution_u = 0.1 instrument.resolution_v = -0.1 instrument.resolution_w = 0.1 instrument.resolution_y = 0 job.show_analysis_chart() <p>Print parameters to be refined (free parameters) before fitting with Lmfit</p> In\u00a0[19]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() name value error 1 .phases['lbco'].cell.length_a 3.88 \u00c5 0.0 2 .phases['lbco'].scale 6.00 0.0 3 .instrument.resolution_u 0.10 0.0 4 .instrument.resolution_v -0.10 0.0 5 .instrument.resolution_w 0.10 0.0 6 .instrument.resolution_y 0.00 0.0 <p>Show the current minimization engine</p> In\u00a0[20]: Copied! <pre>print(job.analysis.current_minimizer)\n</pre> print(job.analysis.current_minimizer) <pre>LMFit_leastsq\n</pre> <p>Start minimization using the default minimizer (Least Squares method from the Lmfit library)</p> In\u00a0[21]: Copied! <pre>job.fit()\n</pre> job.fit() <pre>Fitting result\nStatus: \ud83e\udd73 Success\nDuration: \u231b 3.79 s\nReduced \u03c7\u00b2: \ud83d\udc4d 1.31\n</pre> <p>Print the refined parameters after fitting with Lmfit</p> In\u00a0[22]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() name value error 1 .phases['lbco'].cell.length_a 3.890880 \u00c5 0.000040 2 .phases['lbco'].scale 9.202849 0.032388 3 .instrument.resolution_u 0.081730 0.003211 4 .instrument.resolution_v -0.115064 0.006879 5 .instrument.resolution_w 0.118244 0.003306 6 .instrument.resolution_y 0.087071 0.001971 7 .pattern.zero_shift 0.622785 deg 0.001079 <p>Display the analysis chart after the fitting with Lmfit</p> In\u00a0[23]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Show list of available minimisation engines</p> In\u00a0[24]: Copied! <pre>for mini in job.analysis.available_minimizers:\n    print(mini)\n</pre> for mini in job.analysis.available_minimizers:     print(mini) <pre>LMFit\nLMFit_leastsq\nLMFit_powell\nLMFit_cobyla\nLMFit_differential_evolution\nLMFit_scipy_least_squares\nBumps\nBumps_simplex\nBumps_newton\nBumps_lm\nDFO\nDFO_leastsq\n</pre> <p>Change the minimization method to simplex from the Bumps library</p> In\u00a0[25]: Copied! <pre>job.analysis.current_minimizer = 'Bumps_lm'\nprint(job.analysis.current_minimizer)\n</pre> job.analysis.current_minimizer = 'Bumps_lm' print(job.analysis.current_minimizer) <pre>Bumps_lm\n</pre> <p>Reset the free parameters to their initial values (before fitting with Lmfit) and display the analysis chart</p> In\u00a0[26]: Copied! <pre>phase.scale = 6\nphase.cell.length_a = 3.88\npattern.zero_shift = 0.3\ninstrument.resolution_u = 0.1\ninstrument.resolution_v = -0.1\ninstrument.resolution_w = 0.1\ninstrument.resolution_y = 0\njob.show_analysis_chart()\n</pre> phase.scale = 6 phase.cell.length_a = 3.88 pattern.zero_shift = 0.3 instrument.resolution_u = 0.1 instrument.resolution_v = -0.1 instrument.resolution_w = 0.1 instrument.resolution_y = 0 job.show_analysis_chart() <p>Print free parameters before the fitting with Bumps</p> In\u00a0[27]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() name value error 1 .phases['lbco'].cell.length_a 3.88 \u00c5 0.000040 2 .phases['lbco'].scale 6.00 0.032388 3 .instrument.resolution_u 0.10 0.003211 4 .instrument.resolution_v -0.10 0.006879 5 .instrument.resolution_w 0.10 0.003306 6 .instrument.resolution_y 0.00 0.001971 7 .pattern.zero_shift 0.30 deg 0.001079 <p>Start minimization with Bumps</p> In\u00a0[28]: Copied! <pre>job.fit()\n</pre> job.fit() <pre>Fitting result\nStatus: \ud83e\udd73 Success\nDuration: \u231b 3.94 s\nReduced \u03c7\u00b2: \ud83d\udc4d 1.31\n</pre> <p>Print free parameters after the fitting with Bumps</p> In\u00a0[29]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() name value error 1 .phases['lbco'].cell.length_a 3.890896 \u00c5 0.000035 2 .phases['lbco'].scale 9.202826 0.028286 3 .instrument.resolution_u 0.081818 0.002806 4 .instrument.resolution_v -0.115158 0.006010 5 .instrument.resolution_w 0.118262 0.002888 6 .instrument.resolution_y 0.087064 0.001721 7 .pattern.zero_shift 0.623144 deg 0.000943 <p>Display the analysis chart after the fitting with Bumps</p> In\u00a0[30]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart()"},{"location":"examples/Change-minimizer/#change-minimizer","title":"Change minimizer\u00b6","text":"<p>This example shows how to change the minimization engine for refinement.</p>"},{"location":"examples/Change-minimizer/#import-easydiffraction","title":"Import EasyDiffraction\u00b6","text":""},{"location":"examples/Change-minimizer/#create-a-job","title":"Create a job\u00b6","text":""},{"location":"examples/Change-minimizer/#define-a-model","title":"Define a model\u00b6","text":"<p>Download the CIF file from the EasyDiffraction repository on GitHub</p>"},{"location":"examples/Change-minimizer/#define-an-experiment","title":"Define an experiment\u00b6","text":"<p>Download the data file from the EasyDiffraction repository on GitHub</p>"},{"location":"examples/Change-minimizer/#perform-an-analysis","title":"Perform an analysis\u00b6","text":"<p>Display the analysis chart before setting initial parameter values</p>"},{"location":"examples/Define-experiment/","title":"Define experiment","text":"In\u00a0[2]: Copied! <pre>import easydiffraction as ed\n</pre> import easydiffraction as ed In\u00a0[3]: Copied! <pre>ed.download_from_repository('d1a.cif', destination='data')\n</pre> ed.download_from_repository('d1a.cif', destination='data') <p>Show content of the downloaded file (first 45 lines)</p> In\u00a0[4]: Copied! <pre>with open('data/d1a.cif') as f:\n    print(''.join(f.readlines()[:45]))\n</pre> with open('data/d1a.cif') as f:     print(''.join(f.readlines()[:45])) <pre>data_d1a\n\n_diffrn_radiation.probe neutron\n_diffrn_radiation_wavelength.wavelength 1.91\n\n_pd_calib.2theta_offset -0.1406(1)\n\n_pd_instr.resolution_u 0.139\n_pd_instr.resolution_v -0.4124\n_pd_instr.resolution_w 0.386\n_pd_instr.resolution_x 0\n_pd_instr.resolution_y 0.0878\n\n_pd_instr.reflex_asymmetry_p1 0\n_pd_instr.reflex_asymmetry_p2 0\n_pd_instr.reflex_asymmetry_p3 0\n_pd_instr.reflex_asymmetry_p4 0\n\nloop_\n_pd_phase_block.id\n_pd_phase_block.scale\npbso4 1.4597(21)\n\nloop_\n_pd_background.line_segment_X\n_pd_background.line_segment_intensity\n_pd_background.X_coordinate\n11 206.1624 2theta\n15 194.75 2theta\n20 194.505 2theta\n30 188.4375 2theta\n50 207.7633 2theta\n70 201.7002 2theta\n120 244.4525 2theta\n153 226.0595 2theta\n\nloop_\n_pd_meas.2theta_scan\n_pd_meas.intensity_total\n_pd_meas.intensity_total_su\n10 220 14.8324\n10.05 214 14.6287\n10.1 219 14.7986\n10.15 224 14.9666\n10.2 198 14.0712\n\n</pre> <p>Load the data from the file and show the chart</p> In\u00a0[5]: Copied! <pre>job = ed.Job(type='pd-neut-cwl')\njob.add_experiment_from_file('data/d1a.cif')\njob.show_experiment_chart()\n</pre> job = ed.Job(type='pd-neut-cwl') job.add_experiment_from_file('data/d1a.cif') job.show_experiment_chart() In\u00a0[6]: Copied! <pre>ed.download_from_repository('hrpt.xye', destination='data')\n</pre> ed.download_from_repository('hrpt.xye', destination='data') <p>Show content of the downloaded file (first 6 lines)</p> In\u00a0[7]: Copied! <pre>with open('data/hrpt.xye') as f:\n    print(''.join(f.readlines()[:6]))\n</pre> with open('data/hrpt.xye') as f:     print(''.join(f.readlines()[:6])) <pre>#  2theta intensity   su\n   10.00    167.00   12.60\n   10.05    157.00   12.50\n   10.10    187.00   13.30\n   10.15    197.00   14.00\n   10.20    164.00   12.50\n\n</pre> <p>Load the data from the file and show the chart</p> In\u00a0[8]: Copied! <pre>job = ed.Job(type='pd-neut-cwl')\njob.add_experiment_from_file('data/hrpt.xye')\njob.show_experiment_chart()\n</pre> job = ed.Job(type='pd-neut-cwl') job.add_experiment_from_file('data/hrpt.xye') job.show_experiment_chart() In\u00a0[9]: Copied! <pre>ed.download_from_repository('sepd.xye', destination='data')\n</pre> ed.download_from_repository('sepd.xye', destination='data') <p>Show content of the downloaded file (first 5 lines)</p> In\u00a0[10]: Copied! <pre>with open('data/sepd.xye') as f:\n    print(''.join(f.readlines()[:5]))\n</pre> with open('data/sepd.xye') as f:     print(''.join(f.readlines()[:5])) <pre>2000.0 213.8 3.3\n2005.0 213.8 3.3\n2010.0 210.1 3.3\n2015.0 213.3 3.3\n2020.0 211.9 3.3\n\n</pre> <p>Load the data from the file and show the chart</p> In\u00a0[11]: Copied! <pre>job = ed.Job(type='pd-neut-tof')\njob.add_experiment_from_file('data/sepd.xye')\njob.show_experiment_chart(show_legend=False)\n</pre> job = ed.Job(type='pd-neut-tof') job.add_experiment_from_file('data/sepd.xye') job.show_experiment_chart(show_legend=False)"},{"location":"examples/Define-experiment/#define-an-experiment","title":"Define an experiment\u00b6","text":"<p>This example shows how to define experimental parameters and load measured data in EasyDiffraction.</p>"},{"location":"examples/Define-experiment/#import-easydiffraction","title":"Import EasyDiffraction\u00b6","text":""},{"location":"examples/Define-experiment/#define-an-experiment","title":"Define an experiment\u00b6","text":""},{"location":"examples/Define-experiment/#pd-neut-cwl","title":"pd-neut-cwl\u00b6","text":""},{"location":"examples/Define-experiment/#load-from-cif","title":"Load from CIF\u00b6","text":"<p>Download the data file from the EasyDiffraction repository on GitHub</p>"},{"location":"examples/Define-experiment/#load-from-xye","title":"Load from XYE\u00b6","text":"<p>Download the data file from the EasyDiffraction repository on GitHub</p>"},{"location":"examples/Define-experiment/#pd-neut-tof","title":"pd-neut-tof\u00b6","text":""},{"location":"examples/Define-experiment/#load-from-xye","title":"Load from XYE\u00b6","text":"<p>Download the data file from the EasyDiffraction repository on GitHub</p>"},{"location":"examples/Define-model/","title":"Define model","text":"In\u00a0[2]: Copied! <pre>import easydiffraction as ed\n</pre> import easydiffraction as ed In\u00a0[3]: Copied! <pre>job = ed.Job()\n</pre> job = ed.Job() In\u00a0[4]: Copied! <pre>phase = ed.Phase(name='nacl')\n</pre> phase = ed.Phase(name='nacl') <p>Set space group</p> In\u00a0[5]: Copied! <pre>phase.space_group.name_hm_alt = 'F m -3 m'\n</pre> phase.space_group.name_hm_alt = 'F m -3 m' <p>Set cell parameters</p> In\u00a0[6]: Copied! <pre>phase.cell.length_a = 5.691694\n</pre> phase.cell.length_a = 5.691694 <p>Add atoms</p> In\u00a0[7]: Copied! <pre>phase.atom_sites.append(label='Na',\n                        type_symbol='Na',\n                        fract_x=0,\n                        fract_y=0,\n                        fract_z=0,\n                        occupancy=1,\n                        b_iso_or_equiv=0.5)\nphase.atom_sites.append(label='Cl',\n                        type_symbol='Cl',\n                        fract_x=0,\n                        fract_y=0,\n                        fract_z=0.5,\n                        occupancy=1,\n                        b_iso_or_equiv=0.5)\n</pre> phase.atom_sites.append(label='Na',                         type_symbol='Na',                         fract_x=0,                         fract_y=0,                         fract_z=0,                         occupancy=1,                         b_iso_or_equiv=0.5) phase.atom_sites.append(label='Cl',                         type_symbol='Cl',                         fract_x=0,                         fract_y=0,                         fract_z=0.5,                         occupancy=1,                         b_iso_or_equiv=0.5) <p>Add phase to the job object</p> In\u00a0[8]: Copied! <pre>job.add_phase(phase=phase)\nprint(job.phases)\n</pre> job.add_phase(phase=phase) print(job.phases) <pre>Collection of 1 phases: ['nacl']\n</pre> <p>Show phase info in CIF format</p> In\u00a0[9]: Copied! <pre>phase = job.phases['nacl']\nprint(phase.cif)\n</pre> phase = job.phases['nacl'] print(phase.cif) <pre>data_nacl\n_cell_length_a 5.691694\n_cell_length_b 5.691694\n_cell_length_c 5.691694\n_cell_angle_alpha 90.00000000\n_cell_angle_beta 90.00000000\n_cell_angle_gamma 90.00000000\n_space_group_name_H-M_ref 'F m -3 m'\n_space_group_IT_coordinate_system_code 1\n\nloop_\n_atom_site_label\n_atom_site_type_symbol\n_atom_site_fract_x\n_atom_site_fract_y\n_atom_site_fract_z\n_atom_site_occupancy\n_atom_site_adp_type\n_atom_site_B_iso_or_equiv\nNa Na 0.00000000 0.00000000 0.00000000 1.00000000 Biso 0.5\nCl Cl 0.00000000 0.00000000 0.5 1.00000000 Biso 0.5\n</pre> <p>Display the crystal structure of a given model</p> In\u00a0[10]: Copied! <pre>job.show_crystal_structure(id='nacl')\n</pre> job.show_crystal_structure(id='nacl') <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> In\u00a0[11]: Copied! <pre>ed.download_from_repository('lbco.cif', destination='data')\n</pre> ed.download_from_repository('lbco.cif', destination='data') <p>Load a phase from the downloaded CIF file</p> In\u00a0[12]: Copied! <pre>job.add_phase_from_file('data/lbco.cif')\nprint(job.phases)\n</pre> job.add_phase_from_file('data/lbco.cif') print(job.phases) <pre>Collection of 2 phases: ['nacl', 'lbco']\n</pre> <p>Show phase info in CIF format</p> In\u00a0[13]: Copied! <pre>print(job.phases['lbco'].cif)\n</pre> print(job.phases['lbco'].cif) <pre>data_lbco\n_cell_length_a 3.88\n_cell_length_b 3.88\n_cell_length_c 3.88\n_cell_angle_alpha 90.00000000\n_cell_angle_beta 90.00000000\n_cell_angle_gamma 90.00000000\n_space_group_name_H-M_ref 'P m -3 m'\n_space_group_IT_coordinate_system_code 1\n\nloop_\n_atom_site_label\n_atom_site_type_symbol\n_atom_site_fract_x\n_atom_site_fract_y\n_atom_site_fract_z\n_atom_site_occupancy\n_atom_site_adp_type\n_atom_site_B_iso_or_equiv\nLa La 0.00000000 0.00000000 0.00000000 0.5 Biso 0.1\nBa Ba 0.00000000 0.00000000 0.00000000 0.5 Biso 0.1\nCo Co 0.5 0.5 0.5 1.00000000 Biso 0.1\nO O 0.00000000 0.5 0.5 1.00000000 Biso 0.1\n</pre> <p>Display the crystal structure of a given model</p> In\u00a0[14]: Copied! <pre>job.show_crystal_structure(id='lbco')\n</pre> job.show_crystal_structure(id='lbco') <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p>"},{"location":"examples/Define-model/#define-a-model","title":"Define a model\u00b6","text":"<p>This example shows how to define a model of a crystal structure in EasyDiffraction.</p>"},{"location":"examples/Define-model/#import-easydiffraction","title":"Import EasyDiffraction\u00b6","text":""},{"location":"examples/Define-model/#create-a-job","title":"Create a job\u00b6","text":"<p>Create a job \u2014 the main object to store all the information</p>"},{"location":"examples/Define-model/#define-a-model","title":"Define a model\u00b6","text":""},{"location":"examples/Define-model/#set-manually","title":"Set manually\u00b6","text":"<p>Create a phase object</p>"},{"location":"examples/Define-model/#load-from-cif","title":"Load from CIF\u00b6","text":"<p>Download the CIF file from the EasyDiffraction repository on GitHub</p>"},{"location":"examples/Fitting-emcee_pd-neut-cwl_LBCO-HRPT/","title":"MCMC pd-neut-tof NCAF-WISH","text":"In\u00a0[1]: Copied! <pre>import corner  # Library for plotting posterior distributions\nimport emcee  # Library for Markov chain Monte Carlo (MCMC) sampling\nimport matplotlib.pyplot as plt  # Plotting library\nimport numpy as np  # Numerical library\n\nimport easydiffraction as ed\n</pre> import corner  # Library for plotting posterior distributions import emcee  # Library for Markov chain Monte Carlo (MCMC) sampling import matplotlib.pyplot as plt  # Plotting library import numpy as np  # Numerical library  import easydiffraction as ed In\u00a0[2]: Copied! <pre># helper functions\n\n\ndef compute_rmse(y_target, y_predicted):\n    \"\"\"\n    Compute root mean squared error (RMSE) between\n    target and predicted values\n    \"\"\"\n    delta_y = y_target - y_predicted\n    rmse = np.sqrt(np.mean(delta_y**2))\n    return rmse\n\n\ndef compute_mse_weighted(y_target, y_predicted):\n    \"\"\"\n    Compute the weighted mean squared error.\n    (weighting by y_target)\n    \"\"\"\n    delta_y = y_target - y_predicted\n    weight = y_target\n    mse_weighted = np.mean(delta_y**2 / weight)\n    return mse_weighted\n</pre> # helper functions   def compute_rmse(y_target, y_predicted):     \"\"\"     Compute root mean squared error (RMSE) between     target and predicted values     \"\"\"     delta_y = y_target - y_predicted     rmse = np.sqrt(np.mean(delta_y**2))     return rmse   def compute_mse_weighted(y_target, y_predicted):     \"\"\"     Compute the weighted mean squared error.     (weighting by y_target)     \"\"\"     delta_y = y_target - y_predicted     weight = y_target     mse_weighted = np.mean(delta_y**2 / weight)     return mse_weighted In\u00a0[3]: Copied! <pre># theta_0 is close to a least-square solution\ntheta_0 = np.array([2.0, 3.89, 9.0, 0.6,\n                    0.08, -0.12,\n                    0.12, 0.08,\n                    172, 172])\nparameter_names = ['sigma', 'length_a', 'scale', 'zero_shift',\n                   'resolution_u', 'resolution_v',\n                   'resolution_w', 'resolution_y',\n                   'intensity', 'intensity-1']\n\n\ndef generate_starting_theta():\n    \"\"\"\n    Generate random initial starting point pretty close to theta_0\n    \"\"\"\n\n    # parameters defining how much randomness to add to theta_0\n    dx_sigma = 1\n    dx_lattice_parameter = 0.01\n    dx_scale = 0.1\n    dx_zeroshift = 0.03\n    dx_reso = 0.01\n    dx_bkg = 5\n\n    # randomize theta\n    theta = theta_0.copy()\n    theta[0] += np.random.uniform(-dx_sigma, dx_sigma)\n\n    for i in [1]:\n        theta[i] += np.random.uniform(-dx_lattice_parameter,\n                                      dx_lattice_parameter)\n\n    theta[2] += np.random.uniform(-dx_scale, dx_scale)\n    theta[3] += np.random.uniform(-dx_zeroshift, dx_zeroshift)\n\n    theta[4] += np.random.uniform(-dx_reso, dx_reso)\n    theta[5] += np.random.uniform(-dx_reso, dx_reso)\n    theta[6] += np.random.uniform(-dx_reso, dx_reso)\n    theta[7] += np.random.uniform(-dx_reso, dx_reso)\n\n    theta[8] += np.random.uniform(-dx_bkg, dx_bkg)\n    theta[9] += np.random.uniform(-dx_bkg, dx_bkg)\n\n    return theta\n\n\ndef set_job_parameters(job, theta):\n    \"\"\"\n    Set all the parameters for the job.\n    theta[0] is sigma and is thus not used\n    \"\"\"\n\n    job.phases[0].cell.length_a = theta[1]\n    job.phases[0].scale = theta[2]\n    job.pattern.zero_shift = theta[3]\n    job.parameters.resolution_u = theta[4]\n    job.parameters.resolution_v = theta[5]\n    job.parameters.resolution_w = theta[6]\n    job.parameters.resolution_y = theta[7]\n    job.backgrounds[0][0].y = theta[8]\n    job.backgrounds[0][1].y = theta[9]\n</pre> # theta_0 is close to a least-square solution theta_0 = np.array([2.0, 3.89, 9.0, 0.6,                     0.08, -0.12,                     0.12, 0.08,                     172, 172]) parameter_names = ['sigma', 'length_a', 'scale', 'zero_shift',                    'resolution_u', 'resolution_v',                    'resolution_w', 'resolution_y',                    'intensity', 'intensity-1']   def generate_starting_theta():     \"\"\"     Generate random initial starting point pretty close to theta_0     \"\"\"      # parameters defining how much randomness to add to theta_0     dx_sigma = 1     dx_lattice_parameter = 0.01     dx_scale = 0.1     dx_zeroshift = 0.03     dx_reso = 0.01     dx_bkg = 5      # randomize theta     theta = theta_0.copy()     theta[0] += np.random.uniform(-dx_sigma, dx_sigma)      for i in [1]:         theta[i] += np.random.uniform(-dx_lattice_parameter,                                       dx_lattice_parameter)      theta[2] += np.random.uniform(-dx_scale, dx_scale)     theta[3] += np.random.uniform(-dx_zeroshift, dx_zeroshift)      theta[4] += np.random.uniform(-dx_reso, dx_reso)     theta[5] += np.random.uniform(-dx_reso, dx_reso)     theta[6] += np.random.uniform(-dx_reso, dx_reso)     theta[7] += np.random.uniform(-dx_reso, dx_reso)      theta[8] += np.random.uniform(-dx_bkg, dx_bkg)     theta[9] += np.random.uniform(-dx_bkg, dx_bkg)      return theta   def set_job_parameters(job, theta):     \"\"\"     Set all the parameters for the job.     theta[0] is sigma and is thus not used     \"\"\"      job.phases[0].cell.length_a = theta[1]     job.phases[0].scale = theta[2]     job.pattern.zero_shift = theta[3]     job.parameters.resolution_u = theta[4]     job.parameters.resolution_v = theta[5]     job.parameters.resolution_w = theta[6]     job.parameters.resolution_y = theta[7]     job.backgrounds[0][0].y = theta[8]     job.backgrounds[0][1].y = theta[9] In\u00a0[4]: Copied! <pre># define all probabilities, priors, likelihoods, posteriors\n\n\ndef log_gaussian_likelihood(theta):\n\n    # set parameters\n    sigma = theta[0]\n    set_job_parameters(job, theta)\n\n    # if the calculation fails for any reason, return -inf\n    try:\n        y_predicted = job.calculate_profile()\n    except ArithmeticError:\n        return -np.inf\n\n    # if y contains nan then return -inf\n    if np.any(np.isnan(y_predicted)):\n        return -np.inf\n\n    # compute log-likelihood\n    sigmas = sigma * np.sqrt(meas_y)\n    LL = -0.5 * np.sum(np.log(2 * np.pi * sigmas ** 2) +\n                       (meas_y - y_predicted) ** 2 / sigmas ** 2)\n    return LL\n\n\ndef log_prior(theta):\n    sigma = theta[0]\n    if sigma &lt; 0 or sigma &gt; 1000:\n        return -np.inf\n    return 0\n\n\ndef log_posterior(theta):\n    return log_prior(theta) + log_gaussian_likelihood(theta)\n</pre> # define all probabilities, priors, likelihoods, posteriors   def log_gaussian_likelihood(theta):      # set parameters     sigma = theta[0]     set_job_parameters(job, theta)      # if the calculation fails for any reason, return -inf     try:         y_predicted = job.calculate_profile()     except ArithmeticError:         return -np.inf      # if y contains nan then return -inf     if np.any(np.isnan(y_predicted)):         return -np.inf      # compute log-likelihood     sigmas = sigma * np.sqrt(meas_y)     LL = -0.5 * np.sum(np.log(2 * np.pi * sigmas ** 2) +                        (meas_y - y_predicted) ** 2 / sigmas ** 2)     return LL   def log_prior(theta):     sigma = theta[0]     if sigma &lt; 0 or sigma &gt; 1000:         return -np.inf     return 0   def log_posterior(theta):     return log_prior(theta) + log_gaussian_likelihood(theta) In\u00a0[5]: Copied! <pre># create a job\njob = ed.Job()\n\n# load cif\ned.download_from_repository('lbco_adp.cif', destination='data')\ncif_fname = 'data/lbco_adp.cif'\njob.add_phase_from_file(cif_fname)\n\n# load diffraction data\ned.download_from_repository('hrpt.xye', destination='data')\nmeas_fname = 'data/hrpt.xye'\nmeas_x, meas_y, meas_e = np.loadtxt(meas_fname, unpack=True)\nprint('Data shape:', meas_x.shape, meas_y.shape)\njob.add_experiment_from_file(meas_fname)\n</pre> # create a job job = ed.Job()  # load cif ed.download_from_repository('lbco_adp.cif', destination='data') cif_fname = 'data/lbco_adp.cif' job.add_phase_from_file(cif_fname)  # load diffraction data ed.download_from_repository('hrpt.xye', destination='data') meas_fname = 'data/hrpt.xye' meas_x, meas_y, meas_e = np.loadtxt(meas_fname, unpack=True) print('Data shape:', meas_x.shape, meas_y.shape) job.add_experiment_from_file(meas_fname) <pre>Data shape: (3098,) (3098,)\n</pre> In\u00a0[6]: Copied! <pre># setup\njob.parameters.wavelength = 1.494\n\n# add background\njob.set_background([(meas_x[0], 170),\n                    (meas_x[-1], 170)])\n</pre> # setup job.parameters.wavelength = 1.494  # add background job.set_background([(meas_x[0], 170),                     (meas_x[-1], 170)]) <p>Note here that no parameters are set to be refined. The MCMC simulations will be carried out using <code>emcee</code> package which will use the <code>log_posterior</code> function to sample the posterior. The <code>job</code> will only be used to calculate the diffraction pattern for the parameters that <code>emcee</code> will sample.</p> In\u00a0[7]: Copied! <pre># Check if theta_0 is reasonable\nset_job_parameters(job, theta_0)\ny_initial = job.calculate_profile()\nrmse_initial = compute_rmse(meas_y, y_initial)\nmsew_initial = compute_mse_weighted(meas_y, y_initial)\nprint(f'Initial: RMSE {rmse_initial:.3f}, MSE-weighted {msew_initial:.3f}')\n\n# plot\nfig = plt.figure(figsize=(11, 4.5))\nplt.plot(meas_x, meas_y, label='Exp')\nplt.plot(meas_x, y_initial, label='Initial')\nplt.plot(meas_x, meas_y - y_initial-500, label='Diff')\nplt.legend()\nfig.tight_layout()\n</pre> # Check if theta_0 is reasonable set_job_parameters(job, theta_0) y_initial = job.calculate_profile() rmse_initial = compute_rmse(meas_y, y_initial) msew_initial = compute_mse_weighted(meas_y, y_initial) print(f'Initial: RMSE {rmse_initial:.3f}, MSE-weighted {msew_initial:.3f}')  # plot fig = plt.figure(figsize=(11, 4.5)) plt.plot(meas_x, meas_y, label='Exp') plt.plot(meas_x, y_initial, label='Initial') plt.plot(meas_x, meas_y - y_initial-500, label='Diff') plt.legend() fig.tight_layout() <pre>Initial: RMSE 26.503, MSE-weighted 1.561\n</pre> In\u00a0[8]: Copied! <pre># MCMC parameters\nn_walkers = 15            # number of MCMC walkers\nn_every = 1               # keep every x:th sample\nn_steps = 1000 // n_every # steps per walker\nn_parameters = 10         # number of parameters\n</pre> # MCMC parameters n_walkers = 15            # number of MCMC walkers n_every = 1               # keep every x:th sample n_steps = 1000 // n_every # steps per walker n_parameters = 10         # number of parameters <p>Next, we generate the starting parameters for all walkers.</p> In\u00a0[9]: Copied! <pre># generate starting points for walkers\ntheta_start = [theta_0.copy()]\nfor _ in range(n_walkers-1):\n    theta_start.append(generate_starting_theta())\ntheta_start = np.array(theta_start).copy()\nprint('theta start shape:', theta_start.shape)\n\n# sanity check starting points such that there is no horribly starting points with e.g. NaNs\nfor it, theta in enumerate(theta_start):\n    set_job_parameters(job, theta)\n    y = job.calculate_profile()\n    rmse = compute_rmse(meas_y, y)\n    msew = compute_mse_weighted(meas_y, y)\n    logp = log_posterior(theta)\n\n    print(f'Walker {it:2}: log-posterior {logp:11.5f} | RMSE {rmse:.3f} | MSE-weighted {msew:.3f}')\n</pre> # generate starting points for walkers theta_start = [theta_0.copy()] for _ in range(n_walkers-1):     theta_start.append(generate_starting_theta()) theta_start = np.array(theta_start).copy() print('theta start shape:', theta_start.shape)  # sanity check starting points such that there is no horribly starting points with e.g. NaNs for it, theta in enumerate(theta_start):     set_job_parameters(job, theta)     y = job.calculate_profile()     rmse = compute_rmse(meas_y, y)     msew = compute_mse_weighted(meas_y, y)     logp = log_posterior(theta)      print(f'Walker {it:2}: log-posterior {logp:11.5f} | RMSE {rmse:.3f} | MSE-weighted {msew:.3f}') <pre>theta start shape: (15, 10)\nWalker  0: log-posterior -13788.56594 | RMSE 26.503 | MSE-weighted 1.561\nWalker  1: log-posterior -28284.96448 | RMSE 94.785 | MSE-weighted 12.004\nWalker  2: log-posterior -19814.74938 | RMSE 136.556 | MSE-weighted 23.895\nWalker  3: log-posterior -27788.83954 | RMSE 115.817 | MSE-weighted 12.446\nWalker  4: log-posterior -14679.93963 | RMSE 42.511 | MSE-weighted 2.668\nWalker  5: log-posterior -14734.93489 | RMSE 53.285 | MSE-weighted 2.946\nWalker  6: log-posterior -16002.82980 | RMSE 89.051 | MSE-weighted 7.853\nWalker  7: log-posterior -16725.05550 | RMSE 111.820 | MSE-weighted 12.785\nWalker  8: log-posterior -36356.28704 | RMSE 237.575 | MSE-weighted 92.157\nWalker  9: log-posterior -20544.42476 | RMSE 163.019 | MSE-weighted 29.857\nWalker 10: log-posterior -14188.84818 | RMSE 41.946 | MSE-weighted 2.774\nWalker 11: log-posterior -28329.06082 | RMSE 115.493 | MSE-weighted 18.974\nWalker 12: log-posterior -14062.19162 | RMSE 44.561 | MSE-weighted 2.593\nWalker 13: log-posterior -13910.94726 | RMSE 35.967 | MSE-weighted 2.098\nWalker 14: log-posterior -17684.49851 | RMSE 71.080 | MSE-weighted 5.508\n</pre> <p>In order make emcee run with fewer walkers than twice the number of parameters, we need to set <code>sampler._moves[0].live_dangerously = True</code>, but this is often unadvisable.</p> <p>Due to the starting points for the walkers being quite similar we also may need to set <code>skip_initial_state_check=True</code> in order to avoid poor conditioned starting point error.</p> In\u00a0[10]: Copied! <pre># sample\nsampler = emcee.EnsembleSampler(n_walkers, n_parameters, log_posterior)\nsampler._moves[0].live_dangerously = True\nsampler.run_mcmc(theta_start, n_steps, progress=True, thin_by=n_every, skip_initial_state_check=True)\nprint('Done!')\n</pre> # sample sampler = emcee.EnsembleSampler(n_walkers, n_parameters, log_posterior) sampler._moves[0].live_dangerously = True sampler.run_mcmc(theta_start, n_steps, progress=True, thin_by=n_every, skip_initial_state_check=True) print('Done!') <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [12:49&lt;00:00,  1.30it/s]</pre> <pre>Done!\n</pre> <pre>\n</pre> In\u00a0[11]: Copied! <pre>samples = sampler.chain\nlogp = sampler.lnprobability\nsteps = n_every * np.arange(0, samples.shape[1])\nprint('samples shape:', samples.shape)\n</pre> samples = sampler.chain logp = sampler.lnprobability steps = n_every * np.arange(0, samples.shape[1]) print('samples shape:', samples.shape) <pre>samples shape: (15, 1000, 10)\n</pre> <p>First we'll plot the posterior of all walkers to check convergence.</p> In\u00a0[12]: Copied! <pre>fig = plt.figure(figsize=(11, 5))\nfor walker_ind in range(n_walkers):\n    plt.plot(steps, logp[walker_ind, :], label=f'Walker {walker_ind}')\nplt.legend()\nplt.ylabel('Log posterior')\nplt.xlabel('MCMC iteration')\nfig.tight_layout()\n</pre> fig = plt.figure(figsize=(11, 5)) for walker_ind in range(n_walkers):     plt.plot(steps, logp[walker_ind, :], label=f'Walker {walker_ind}') plt.legend() plt.ylabel('Log posterior') plt.xlabel('MCMC iteration') fig.tight_layout() <p>Next, we'll plot the MCMC trajectory of the parameters for a few walkers</p> In\u00a0[13]: Copied! <pre>walkers_to_plot = [0, 1, 2, 3, 4, 5, 6]\n\nfig, axes = plt.subplots(5, 2, figsize=(11, 14))\nfor i in range(n_parameters):\n    ax = axes.flat[i]\n    name = parameter_names[i]\n    for walker_ind in walkers_to_plot:\n        ax.plot(steps, samples[walker_ind, :, i], label=f'Walker {walker_ind}')\n    ax.set_ylabel(name)\n    ax.set_xlabel('MCMC iteration')\n    if i == 0:\n        ax.legend(loc=1)\n\nfig.tight_layout()\nplt.show()\n</pre> walkers_to_plot = [0, 1, 2, 3, 4, 5, 6]  fig, axes = plt.subplots(5, 2, figsize=(11, 14)) for i in range(n_parameters):     ax = axes.flat[i]     name = parameter_names[i]     for walker_ind in walkers_to_plot:         ax.plot(steps, samples[walker_ind, :, i], label=f'Walker {walker_ind}')     ax.set_ylabel(name)     ax.set_xlabel('MCMC iteration')     if i == 0:         ax.legend(loc=1)  fig.tight_layout() plt.show() <p>Now we extract the optimal choice of parameters and their standard-deviation. We throw away the equilibration period of the MCMC simulations.</p> In\u00a0[14]: Copied! <pre>n_throw_away = 500 // n_every  # number of equilibration steps to throw away\nsamples_flat = samples[:, n_throw_away:, :].reshape(-1, n_parameters)\nprint('samples shape: ', samples.shape)\nprint('samples_flat shape:', samples_flat.shape)\n</pre> n_throw_away = 500 // n_every  # number of equilibration steps to throw away samples_flat = samples[:, n_throw_away:, :].reshape(-1, n_parameters) print('samples shape: ', samples.shape) print('samples_flat shape:', samples_flat.shape) <pre>samples shape:  (15, 1000, 10)\nsamples_flat shape: (7500, 10)\n</pre> In\u00a0[15]: Copied! <pre># select best model\nind = np.argmax(logp)\nhp_loc = np.unravel_index(ind, logp.shape)\ntheta_best = samples[hp_loc]\n\n# calculate spectra with best model\nset_job_parameters(job, theta_best)\ny = job.calculate_profile()\nrmse_refined = compute_rmse(meas_y, y)\nmsew_refined = compute_mse_weighted(meas_y, y)\nprint(f'Best model: RMSE {rmse_refined:.3f}, MSE-weighted {msew_refined:.3f}, sigma {theta_best[0]:.3f}')\n\n# estimate errors of parameters\nstds = samples_flat.std(axis=0)\n\n# Save the data to be analyzed\ndata = dict(names=parameter_names, steps=steps, samples=samples, logp=logp)\nparameter_dict = dict()\nfor name, val, err in zip(parameter_names, theta_best, stds):\n    key = name\n    if name in parameter_dict:\n        key = key + '-1'\n    print(f'{key:15} {val:12.5f} , err {err:8.5f}')\n    parameter_dict[key] = val, err\ndata['parameters'] = parameter_dict\n</pre> # select best model ind = np.argmax(logp) hp_loc = np.unravel_index(ind, logp.shape) theta_best = samples[hp_loc]  # calculate spectra with best model set_job_parameters(job, theta_best) y = job.calculate_profile() rmse_refined = compute_rmse(meas_y, y) msew_refined = compute_mse_weighted(meas_y, y) print(f'Best model: RMSE {rmse_refined:.3f}, MSE-weighted {msew_refined:.3f}, sigma {theta_best[0]:.3f}')  # estimate errors of parameters stds = samples_flat.std(axis=0)  # Save the data to be analyzed data = dict(names=parameter_names, steps=steps, samples=samples, logp=logp) parameter_dict = dict() for name, val, err in zip(parameter_names, theta_best, stds):     key = name     if name in parameter_dict:         key = key + '-1'     print(f'{key:15} {val:12.5f} , err {err:8.5f}')     parameter_dict[key] = val, err data['parameters'] = parameter_dict <pre>Best model: RMSE 18.881, MSE-weighted 1.246, sigma 1.126\nsigma                1.12602 , err  0.02130\nlength_a             3.89089 , err  0.00004\nscale                9.14524 , err  0.04485\nzero_shift           0.62344 , err  0.00141\nresolution_u         0.08760 , err  0.00147\nresolution_v        -0.12728 , err  0.00118\nresolution_w         0.12579 , err  0.00130\nresolution_y         0.08274 , err  0.00240\nintensity          165.87849 , err  0.79135\nintensity-1        176.49258 , err  0.88823\n</pre> In\u00a0[16]: Copied! <pre># plot diffraction pattern after refinement\nfig = plt.figure(figsize=(11, 4.5))\nplt.plot(meas_x, meas_y, label='Exp')\nplt.plot(meas_x, y, label='Simulated')\nplt.plot(meas_x, meas_y - y-500, label='Diff')\nplt.legend()\nfig.tight_layout()\n</pre> # plot diffraction pattern after refinement fig = plt.figure(figsize=(11, 4.5)) plt.plot(meas_x, meas_y, label='Exp') plt.plot(meas_x, y, label='Simulated') plt.plot(meas_x, meas_y - y-500, label='Diff') plt.legend() fig.tight_layout() In\u00a0[17]: Copied! <pre># corner plot\nfig = plt.figure(figsize=(12, 12))\ncorner.corner(samples_flat, labels=parameter_names)\nfig.tight_layout()\n</pre> # corner plot fig = plt.figure(figsize=(12, 12)) corner.corner(samples_flat, labels=parameter_names) fig.tight_layout() <pre>&lt;Figure size 1200x1200 with 0 Axes&gt;</pre>"},{"location":"examples/Fitting-emcee_pd-neut-cwl_LBCO-HRPT/#mcmc-fitting-pd-neut-cwl-lbco-hrpt","title":"MCMC fitting pd-neut-cwl LBCO-HRPT\u00b6","text":"<p>This example is just a slightly modified version of the example created by Erik Fransson from Chalmers University of Technology. The original example can be found here.</p> <p>In this example, we take a bayesian approach to the refinement process, and rather than looking for the optimal set of parameters, we compute the probability distribution over the parameters.</p>"},{"location":"examples/Fitting-emcee_pd-neut-cwl_LBCO-HRPT/#bayesian-refinement","title":"Bayesian refinement\u00b6","text":"<p>Goal: Finding the posterior probability distribution over parameters, $P(\\boldsymbol{x}|D)$, given some data D and prior knowledge.</p> <ul> <li>Experimental data D ($y^\\text{exp}$)</li> <li>$\\boldsymbol{x}$ parameters to be refined $\\boldsymbol{x}$=($\\boldsymbol{x}_\\text{experiment}$, $\\boldsymbol{x}_\\text{instrument}$, $\\boldsymbol{x}_\\text{sample}$)</li> <li>Simulated diffraction pattern $y^\\text{sim}=f(\\boldsymbol{x})$</li> </ul> <p>The posterior for parameters is \\begin{equation} \\large \\underbrace{P(\\boldsymbol{x}|D)}_\\text{Posterior} = \\underbrace{P(D|\\boldsymbol{x})}_\\text{Likelihood}\\, \\, \\underbrace{P(\\boldsymbol{x})}_\\text{Priors} \\end{equation}</p>"},{"location":"examples/Fitting-emcee_pd-neut-cwl_LBCO-HRPT/#likelihood","title":"Likelihood\u00b6","text":"<p>We assume independent and (almost)identical normal distributed errors. But we take into account heteroscedasticity that is commonly done for diffraction data, i.e. uncertainty scales with sqrt of intensity, which be achieved by modeling the data as \\begin{equation} \\large y^\\text{exp}_i = y^\\text{sim}_i + \\epsilon_i \\\\ \\large \\epsilon_i \\sim \\mathcal{N}(\\mu=0, \\sigma^2_i = \\sigma^2 \\cdot y^\\text{exp}_i). \\end{equation} where $\\epsilon_i$ is the error between the experimental (exp) and simulated (sim) diffraction patterns.</p> <p>And then we get a likelihood that looks like \\begin{equation} \\large P(D|\\boldsymbol{x}) \\propto \\exp{\\left (- \\frac{\\sum_i (y^\\text{sim}_i- y^\\text{exp}_i)^2 }{\\sigma^2 y^\\text{exp}_i}\\right )} \\end{equation} Note here that $\\sigma$ is also a free parameter that we need to include in our modeling.</p>"},{"location":"examples/Fitting-emcee_pd-neut-cwl_LBCO-HRPT/#priors","title":"Priors\u00b6","text":"<p>In this example, we encode no information in the priors, but in princple any prior knowledge about the same could and should be encoded in the prior probability distribution.</p>"},{"location":"examples/Fitting-emcee_pd-neut-cwl_LBCO-HRPT/#posterior","title":"Posterior\u00b6","text":"<p>Finding parameters that maximizes the posterior is equvivalent to regular optimization (least-squares).</p> <p>Obtaining the posterior probability distribution is done via MCMC-sampling with <code>emcee</code>, see their documentation for more details.</p>"},{"location":"examples/Fitting-emcee_pd-neut-cwl_LBCO-HRPT/#more-information","title":"More information\u00b6","text":"<p>See the \"Use of Bayesian Inference in Crystallographic Structure Refinement via Full Diffraction Profile Analysis\" (doi: https://doi.org/10.1038/srep31625), for more information.</p>"},{"location":"examples/Fitting-emcee_pd-neut-cwl_LBCO-HRPT/#import-dependencies","title":"Import dependencies\u00b6","text":""},{"location":"examples/Fitting-emcee_pd-neut-cwl_LBCO-HRPT/#helper-functions","title":"Helper functions\u00b6","text":"<p>Here we let <code>theta</code> be the parameter vector (including $\\sigma$).</p>"},{"location":"examples/Fitting-emcee_pd-neut-cwl_LBCO-HRPT/#probability-functions","title":"Probability functions\u00b6","text":""},{"location":"examples/Fitting-emcee_pd-neut-cwl_LBCO-HRPT/#load-the-data-and-setup-job","title":"Load the data and setup Job\u00b6","text":""},{"location":"examples/Fitting-emcee_pd-neut-cwl_LBCO-HRPT/#run-mcmc-sampling","title":"Run MCMC sampling\u00b6","text":"<p>Next, we define the hyper-parameters to be used for the MCMC sampling</p> <p>The MCMC is carried out by multiple independent \"walkers\".</p> <ul> <li><code>n_steps</code> sets how many steps/iterations each walker will carry out</li> <li><code>n_walkers</code> sets how many walkers to use</li> <li><code>n_parameters</code> is the total number of parameters being optimized</li> <li><code>n_every</code> how often to record store the MCMC trajectory</li> </ul>"},{"location":"examples/Fitting_pd-neut-cwl_LBCO-HRPT/","title":"pd-neut-cwl LBCO-HRPT","text":"In\u00a0[2]: Copied! <pre>import easydiffraction as ed\n</pre> import easydiffraction as ed In\u00a0[3]: Copied! <pre>job = ed.Job()\nprint(job.type)\n</pre> job = ed.Job() print(job.type) <pre>Job type: pd-cwl-unp-1d-neut\n</pre> In\u00a0[4]: Copied! <pre>ed.download_from_repository('lbco.cif', destination='data')\n</pre> ed.download_from_repository('lbco.cif', destination='data') <p>Load a phase from the downloaded CIF file</p> In\u00a0[5]: Copied! <pre>job.add_phase_from_file('data/lbco.cif')\nprint(job.phases)\n</pre> job.add_phase_from_file('data/lbco.cif') print(job.phases) <pre>Collection of 1 phases: ['lbco']\n</pre> <p>Show phase info in CIF format</p> In\u00a0[6]: Copied! <pre>print(job.phases['lbco'].cif)\n</pre> print(job.phases['lbco'].cif) <pre>data_lbco\n_cell_length_a 3.88\n_cell_length_b 3.88\n_cell_length_c 3.88\n_cell_angle_alpha 90.00000000\n_cell_angle_beta 90.00000000\n_cell_angle_gamma 90.00000000\n_space_group_name_H-M_ref 'P m -3 m'\n_space_group_IT_coordinate_system_code 1\n\nloop_\n_atom_site_label\n_atom_site_type_symbol\n_atom_site_fract_x\n_atom_site_fract_y\n_atom_site_fract_z\n_atom_site_occupancy\n_atom_site_adp_type\n_atom_site_B_iso_or_equiv\nLa La 0.00000000 0.00000000 0.00000000 0.5 Biso 0.1\nBa Ba 0.00000000 0.00000000 0.00000000 0.5 Biso 0.1\nCo Co 0.5 0.5 0.5 1.00000000 Biso 0.1\nO O 0.00000000 0.5 0.5 1.00000000 Biso 0.1\n</pre> <p>Display the crystal structure of a given model</p> In\u00a0[7]: Copied! <pre>job.show_crystal_structure(id='lbco')\n</pre> job.show_crystal_structure(id='lbco') <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> In\u00a0[8]: Copied! <pre>ed.download_from_repository('hrpt.xye', destination='data')\n</pre> ed.download_from_repository('hrpt.xye', destination='data') <p>Show content of the downloaded file (first 6 lines)</p> In\u00a0[9]: Copied! <pre>with open('data/hrpt.xye') as f:\n    print(''.join(f.readlines()[:6]))\n</pre> with open('data/hrpt.xye') as f:     print(''.join(f.readlines()[:6])) <pre>#  2theta intensity   su\n   10.00    167.00   12.60\n   10.05    157.00   12.50\n   10.10    187.00   13.30\n   10.15    197.00   14.00\n   10.20    164.00   12.50\n\n</pre> <p>Load experimentally measured data from a file in XYE format</p> In\u00a0[10]: Copied! <pre>job.add_experiment_from_file('data/hrpt.xye')\n</pre> job.add_experiment_from_file('data/hrpt.xye') <p>Display the experimentally measured data</p> In\u00a0[11]: Copied! <pre>job.show_experiment_chart()\n</pre> job.show_experiment_chart() <p>Define a point background</p> In\u00a0[12]: Copied! <pre>job.set_background([(10.0, 170),\n                    (165.0, 170)])\n</pre> job.set_background([(10.0, 170),                     (165.0, 170)]) <p>Display the experiment chart after setting the background</p> In\u00a0[13]: Copied! <pre>job.show_experiment_chart()\n</pre> job.show_experiment_chart() In\u00a0[14]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Show all parameters before refinement</p> In\u00a0[15]: Copied! <pre>job.show_parameters()\n</pre> job.show_parameters() name value error min max vary 1 .phases['lbco'].cell.length_a 3.8800 \u00c5 0.0 inf 2 .phases['lbco'].atom_sites['La'].occupancy 0.5000 -inf inf 3 .phases['lbco'].atom_sites['La'].fract_x 0.0000 -inf inf 4 .phases['lbco'].atom_sites['La'].fract_y 0.0000 -inf inf 5 .phases['lbco'].atom_sites['La'].fract_z 0.0000 -inf inf 6 .phases['lbco'].atom_sites['La'].b_iso_or_equiv 0.1000 \u00c5\u00b2 0.0 inf 7 .phases['lbco'].atom_sites['Ba'].occupancy 0.5000 -inf inf 8 .phases['lbco'].atom_sites['Ba'].fract_x 0.0000 -inf inf 9 .phases['lbco'].atom_sites['Ba'].fract_y 0.0000 -inf inf 10 .phases['lbco'].atom_sites['Ba'].fract_z 0.0000 -inf inf 11 .phases['lbco'].atom_sites['Ba'].b_iso_or_equiv 0.1000 \u00c5\u00b2 0.0 inf 12 .phases['lbco'].atom_sites['Co'].occupancy 1.0000 -inf inf 13 .phases['lbco'].atom_sites['Co'].fract_x 0.5000 -inf inf 14 .phases['lbco'].atom_sites['Co'].fract_y 0.5000 -inf inf 15 .phases['lbco'].atom_sites['Co'].fract_z 0.5000 -inf inf 16 .phases['lbco'].atom_sites['Co'].b_iso_or_equiv 0.1000 \u00c5\u00b2 0.0 inf 17 .phases['lbco'].atom_sites['O'].occupancy 1.0000 -inf inf 18 .phases['lbco'].atom_sites['O'].fract_x 0.0000 -inf inf 19 .phases['lbco'].atom_sites['O'].fract_y 0.5000 -inf inf 20 .phases['lbco'].atom_sites['O'].fract_z 0.5000 -inf inf 21 .phases['lbco'].atom_sites['O'].b_iso_or_equiv 0.1000 \u00c5\u00b2 0.0 inf 22 .phases['lbco'].scale 1.0000 0.0 inf True 23 .instrument.wavelength 1.9100 \u00c5 -inf inf 24 .instrument.resolution_u 0.1390 -inf inf 25 .instrument.resolution_v -0.4124 -inf inf 26 .instrument.resolution_w 0.3860 -inf inf 27 .instrument.resolution_x 0.0000 -inf inf 28 .instrument.resolution_y 0.0878 -inf inf 29 .instrument.reflex_asymmetry_p1 0.0000 -inf inf 30 .instrument.reflex_asymmetry_p2 0.0000 -inf inf 31 .instrument.reflex_asymmetry_p3 0.0000 -inf inf 32 .instrument.reflex_asymmetry_p4 0.0000 -inf inf 33 .zero_shift 0.0000 deg -inf inf <p>Change the default value of the wavelength used in the experiment and display the analysis chart again</p> In\u00a0[16]: Copied! <pre>job.instrument.wavelength = 1.494\njob.show_analysis_chart()\n</pre> job.instrument.wavelength = 1.494 job.show_analysis_chart() <p>Change the scale and display the analysis chart again</p> In\u00a0[17]: Copied! <pre>job.phases['lbco'].scale = 3\njob.show_analysis_chart()\n</pre> job.phases['lbco'].scale = 3 job.show_analysis_chart() <p>Change the default values of the peak profile related parameters and display the analysis chart again</p> In\u00a0[18]: Copied! <pre>job.instrument.resolution_u = 0.1\njob.instrument.resolution_v = -0.1\njob.instrument.resolution_w = 0.2\njob.instrument.resolution_x = 0\njob.instrument.resolution_y = 0\njob.show_analysis_chart()\n</pre> job.instrument.resolution_u = 0.1 job.instrument.resolution_v = -0.1 job.instrument.resolution_w = 0.2 job.instrument.resolution_x = 0 job.instrument.resolution_y = 0 job.show_analysis_chart() <p>Select parameters to be refined in the 1st round</p> In\u00a0[19]: Copied! <pre>job.phases['lbco'].scale.free = True\njob.phases['lbco'].cell.length_a.free = True\njob.pattern.zero_shift.free = True\njob.pattern.backgrounds[0][0].y.free = True\njob.pattern.backgrounds[0][1].y.free = True\n</pre> job.phases['lbco'].scale.free = True job.phases['lbco'].cell.length_a.free = True job.pattern.zero_shift.free = True job.pattern.backgrounds[0][0].y.free = True job.pattern.backgrounds[0][1].y.free = True <p>Print parameters to be refined (free parameters) before fitting</p> In\u00a0[20]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() name value error 1 .phases['lbco'].cell.length_a 3.88 \u00c5 0.0 2 .phases['lbco'].scale 3.00 0.0 <p>Start Least-Squares minimization to refine the selected parameters</p> In\u00a0[21]: Copied! <pre>job.fit()\n</pre> job.fit() <pre>Fitting result\nStatus: \ud83e\udd73 Success\nDuration: \u231b 3.72 s\nReduced \u03c7\u00b2: \ud83d\udc4d 5.45\n</pre> <p>Print the refined parameters after fitting</p> In\u00a0[22]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() name value error 1 .phases['lbco'].cell.length_a 3.890872 \u00c5 0.000076 2 .phases['lbco'].scale 5.275057 0.035223 3 .pattern.zero_shift 0.620519 deg 0.002732 4 .pattern.backgrounds[0]['10,0_deg'].intensity 171.084712 1.115637 5 .pattern.backgrounds[0]['165,0_deg'].intensity 182.964912 1.168906 <p>Display the analysis chart after the 1st fitting</p> In\u00a0[23]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Select more parameters to be refined in the 2nd round</p> In\u00a0[24]: Copied! <pre>job.instrument.resolution_u.free = True\njob.instrument.resolution_v.free = True\njob.instrument.resolution_w.free = True\njob.instrument.resolution_y.free = True\n</pre> job.instrument.resolution_u.free = True job.instrument.resolution_v.free = True job.instrument.resolution_w.free = True job.instrument.resolution_y.free = True <p>Print free parameters before the 2nd fitting</p> In\u00a0[25]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() name value error 1 .phases['lbco'].cell.length_a 3.890872 \u00c5 0.000076 2 .phases['lbco'].scale 5.275057 0.035223 3 .instrument.resolution_u 0.100000 0.000000 4 .instrument.resolution_v -0.100000 0.000000 5 .instrument.resolution_w 0.200000 0.000000 6 .instrument.resolution_y 0.000000 0.000000 7 .pattern.zero_shift 0.620519 deg 0.002732 8 .pattern.backgrounds[0]['10,0_deg'].intensity 171.084712 1.115637 9 .pattern.backgrounds[0]['165,0_deg'].intensity 182.964912 1.168906 <p>Start 2nd round of minimization</p> In\u00a0[26]: Copied! <pre>job.fit()\n</pre> job.fit() <pre>Fitting result\nStatus: \ud83e\udd73 Success\nDuration: \u231b 4.52 s\nReduced \u03c7\u00b2: \ud83d\udc4d 4.14\n</pre> <p>Print free parameters after the 2nd fitting</p> In\u00a0[27]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() name value error 1 .phases['lbco'].cell.length_a 3.890895 \u00c5 0.000067 2 .phases['lbco'].scale 5.923453 0.041978 3 .instrument.resolution_u 0.081104 0.005878 4 .instrument.resolution_v -0.100658 0.013213 5 .instrument.resolution_w 0.099670 0.006739 6 .instrument.resolution_y 0.095296 0.004040 7 .pattern.zero_shift 0.622543 deg 0.002240 8 .pattern.backgrounds[0]['10,0_deg'].intensity 168.345270 0.990891 9 .pattern.backgrounds[0]['165,0_deg'].intensity 175.687739 1.068832 <p>Display the analysis chart after the 2nd fitting</p> In\u00a0[28]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Select atomic displacement parameters (ADPs) to be refined in the 3rd round</p> In\u00a0[29]: Copied! <pre>job.phases['lbco'].atom_sites['La'].b_iso_or_equiv.free = True\njob.phases['lbco'].atom_sites['Ba'].b_iso_or_equiv.free = True\njob.phases['lbco'].atom_sites['Co'].b_iso_or_equiv.free = True\njob.phases['lbco'].atom_sites['O'].b_iso_or_equiv.free = True\n</pre> job.phases['lbco'].atom_sites['La'].b_iso_or_equiv.free = True job.phases['lbco'].atom_sites['Ba'].b_iso_or_equiv.free = True job.phases['lbco'].atom_sites['Co'].b_iso_or_equiv.free = True job.phases['lbco'].atom_sites['O'].b_iso_or_equiv.free = True <p>Print free parameters before the 3rd fitting</p> In\u00a0[30]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() name value error 1 .phases['lbco'].cell.length_a 3.890895 \u00c5 0.000067 2 .phases['lbco'].atom_sites['La'].b_iso_or_equiv 0.100000 \u00c5\u00b2 0.000000 3 .phases['lbco'].atom_sites['Ba'].b_iso_or_equiv 0.100000 \u00c5\u00b2 0.000000 4 .phases['lbco'].atom_sites['Co'].b_iso_or_equiv 0.100000 \u00c5\u00b2 0.000000 5 .phases['lbco'].atom_sites['O'].b_iso_or_equiv 0.100000 \u00c5\u00b2 0.000000 6 .phases['lbco'].scale 5.923453 0.041978 7 .instrument.resolution_u 0.081104 0.005878 8 .instrument.resolution_v -0.100658 0.013213 9 .instrument.resolution_w 0.099670 0.006739 10 .instrument.resolution_y 0.095296 0.004040 11 .pattern.zero_shift 0.622543 deg 0.002240 12 .pattern.backgrounds[0]['10,0_deg'].intensity 168.345270 0.990891 13 .pattern.backgrounds[0]['165,0_deg'].intensity 175.687739 1.068832 <p>Start 3rd round of minimization</p> In\u00a0[31]: Copied! <pre>job.fit()\n</pre> job.fit() <pre>Fitting result\nStatus: \ud83e\udd73 Success\nDuration: \u231b 8.43 s\nReduced \u03c7\u00b2: \ud83d\udc4d 1.25\n</pre> <p>Print free parameters after the 3rd fitting</p> In\u00a0[32]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() name value error 1 .phases['lbco'].cell.length_a 3.890879 \u00c5 0.000039 2 .phases['lbco'].atom_sites['La'].b_iso_or_equiv 0.498536 \u00c5\u00b2 134.109993 3 .phases['lbco'].atom_sites['Ba'].b_iso_or_equiv 0.498478 \u00c5\u00b2 217.861260 4 .phases['lbco'].atom_sites['Co'].b_iso_or_equiv 0.248419 \u00c5\u00b2 0.061584 5 .phases['lbco'].atom_sites['O'].b_iso_or_equiv 1.384822 \u00c5\u00b2 0.016852 6 .phases['lbco'].scale 9.114855 0.064300 7 .instrument.resolution_u 0.080997 0.003182 8 .instrument.resolution_v -0.113611 0.006805 9 .instrument.resolution_w 0.119284 0.003303 10 .instrument.resolution_y 0.084484 0.002146 11 .pattern.zero_shift 0.622739 deg 0.001054 12 .pattern.backgrounds[0]['10,0_deg'].intensity 165.323254 0.556002 13 .pattern.backgrounds[0]['165,0_deg'].intensity 176.987816 0.606535 <p>Display the analysis chart after the 3rd fitting</p> In\u00a0[33]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Show all parameters after refinement</p> In\u00a0[34]: Copied! <pre>job.show_parameters()\n</pre> job.show_parameters() name value error min max vary 1 .phases['lbco'].cell.length_a 3.890879 \u00c5 0.000039 0.0 inf True 2 .phases['lbco'].atom_sites['La'].occupancy 0.500000 -inf inf 3 .phases['lbco'].atom_sites['La'].fract_x 0.000000 -inf inf 4 .phases['lbco'].atom_sites['La'].fract_y 0.000000 -inf inf 5 .phases['lbco'].atom_sites['La'].fract_z 0.000000 -inf inf 6 .phases['lbco'].atom_sites['La'].b_iso_or_equiv 0.498536 \u00c5\u00b2 134.109993 0.0 inf True 7 .phases['lbco'].atom_sites['Ba'].occupancy 0.500000 -inf inf 8 .phases['lbco'].atom_sites['Ba'].fract_x 0.000000 -inf inf 9 .phases['lbco'].atom_sites['Ba'].fract_y 0.000000 -inf inf 10 .phases['lbco'].atom_sites['Ba'].fract_z 0.000000 -inf inf 11 .phases['lbco'].atom_sites['Ba'].b_iso_or_equiv 0.498478 \u00c5\u00b2 217.86126 0.0 inf True 12 .phases['lbco'].atom_sites['Co'].occupancy 1.000000 -inf inf 13 .phases['lbco'].atom_sites['Co'].fract_x 0.500000 -inf inf 14 .phases['lbco'].atom_sites['Co'].fract_y 0.500000 -inf inf 15 .phases['lbco'].atom_sites['Co'].fract_z 0.500000 -inf inf 16 .phases['lbco'].atom_sites['Co'].b_iso_or_equiv 0.248419 \u00c5\u00b2 0.061584 0.0 inf True 17 .phases['lbco'].atom_sites['O'].occupancy 1.000000 -inf inf 18 .phases['lbco'].atom_sites['O'].fract_x 0.000000 -inf inf 19 .phases['lbco'].atom_sites['O'].fract_y 0.500000 -inf inf 20 .phases['lbco'].atom_sites['O'].fract_z 0.500000 -inf inf 21 .phases['lbco'].atom_sites['O'].b_iso_or_equiv 1.384822 \u00c5\u00b2 0.016852 0.0 inf True 22 .phases['lbco'].scale 9.114855 0.0643 0.0 inf True 23 .instrument.wavelength 1.494000 \u00c5 -inf inf 24 .instrument.resolution_u 0.080997 0.003182 -inf inf True 25 .instrument.resolution_v -0.113611 0.006805 -inf inf True 26 .instrument.resolution_w 0.119284 0.003303 -inf inf True 27 .instrument.resolution_x 0.000000 -inf inf 28 .instrument.resolution_y 0.084484 0.002146 -inf inf True 29 .instrument.reflex_asymmetry_p1 0.000000 -inf inf 30 .instrument.reflex_asymmetry_p2 0.000000 -inf inf 31 .instrument.reflex_asymmetry_p3 0.000000 -inf inf 32 .instrument.reflex_asymmetry_p4 0.000000 -inf inf 33 .pattern.zero_shift 0.622739 deg 0.001054 -inf inf True 34 .pattern.backgrounds[0]['10,0_deg'].intensity 165.323254 0.556002 -inf inf True 35 .pattern.backgrounds[0]['165,0_deg'].intensity 176.987816 0.606535 -inf inf True"},{"location":"examples/Fitting_pd-neut-cwl_LBCO-HRPT/#fitting-pd-neut-cwl-lbco-hrpt","title":"Fitting pd-neut-cwl LBCO-HRPT\u00b6","text":"<p>This example shows how to refine the crystal structure parameters of La0.5Ba0.5CoO3 from neutron diffraction data in a constant wavelength experiment performed on HRPT diffractometer at PSI.</p>"},{"location":"examples/Fitting_pd-neut-cwl_LBCO-HRPT/#import-easydiffraction","title":"Import EasyDiffraction\u00b6","text":""},{"location":"examples/Fitting_pd-neut-cwl_LBCO-HRPT/#create-a-job","title":"Create a job\u00b6","text":"<p>Create a job \u2014 the main object to store all the information</p>"},{"location":"examples/Fitting_pd-neut-cwl_LBCO-HRPT/#define-a-model","title":"Define a model\u00b6","text":"<p>Download the CIF file from the EasyDiffraction repository on GitHub</p>"},{"location":"examples/Fitting_pd-neut-cwl_LBCO-HRPT/#define-an-experiment","title":"Define an experiment\u00b6","text":"<p>Download the data file from the EasyDiffraction repository on GitHub</p>"},{"location":"examples/Fitting_pd-neut-cwl_LBCO-HRPT/#perform-an-analysis","title":"Perform an analysis\u00b6","text":"<p>Display the analysis chart before setting initial parameter values</p>"},{"location":"examples/Fitting_pd-neut-tof_NCAF-WISH/","title":"pd-neut-tof NCAF-WISH","text":"In\u00a0[2]: Copied! <pre>import easydiffraction as ed\n</pre> import easydiffraction as ed In\u00a0[3]: Copied! <pre>job = ed.Job(type='tof')\nprint(job.type)\n</pre> job = ed.Job(type='tof') print(job.type) <pre>Job type: pd-tof-unp-1d-neut\n</pre> In\u00a0[4]: Copied! <pre>ed.download_from_repository('ncaf.cif', destination='data')\n</pre> ed.download_from_repository('ncaf.cif', destination='data') <p>Load a phase from the downloaded CIF file</p> In\u00a0[5]: Copied! <pre>job.add_phase_from_file('data/ncaf.cif')\nprint(job.phases)\n</pre> job.add_phase_from_file('data/ncaf.cif') print(job.phases) <pre>Collection of 1 phases: ['ncaf']\n</pre> <p>Show phase info in CIF format</p> In\u00a0[6]: Copied! <pre>phase = job.phases['ncaf']\nprint(phase.cif)\n</pre> phase = job.phases['ncaf'] print(phase.cif) <pre>data_ncaf\n_cell_length_a 10.250256\n_cell_length_b 10.250256\n_cell_length_c 10.250256\n_cell_angle_alpha 90.00000000\n_cell_angle_beta 90.00000000\n_cell_angle_gamma 90.00000000\n_space_group_name_H-M_ref 'I 21 3'\n_space_group_IT_coordinate_system_code 1\n\nloop_\n_atom_site_label\n_atom_site_type_symbol\n_atom_site_fract_x\n_atom_site_fract_y\n_atom_site_fract_z\n_atom_site_occupancy\n_atom_site_adp_type\n_atom_site_B_iso_or_equiv\nCa Ca 0.4661 0.00000000 0.25 1.00000000 Biso 0.9\nAl Al 0.25171 0.25171 0.25171 1.00000000 Biso 0.66\nNa Na 0.08481 0.08481 0.08481 1.00000000 Biso 1.9\nF1 F 0.1375 0.3053 0.1195 1.00000000 Biso 0.9\nF2 F 0.3626 0.3634 0.1867 1.00000000 Biso 1.28\nF3 F 0.4612 0.4612 0.4612 1.00000000 Biso 0.79\n</pre> <p>Display the crystal structure of a given model</p> In\u00a0[7]: Copied! <pre>job.show_crystal_structure(id='ncaf')\n</pre> job.show_crystal_structure(id='ncaf') <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> In\u00a0[8]: Copied! <pre>ed.download_from_repository('wish.xye', destination='data')\n</pre> ed.download_from_repository('wish.xye', destination='data') <p>Show content of the downloaded file (first 5 lines)</p> In\u00a0[9]: Copied! <pre>with open('data/wish.xye') as f:\n    print(''.join(f.readlines()[:5]))\n</pre> with open('data/wish.xye') as f:     print(''.join(f.readlines()[:5])) <pre>     9001.0830          616.5238        124.5646\n     9006.8848          578.7690        123.1410\n     9012.6904          574.1842        120.5078\n     9018.5000          507.7390        111.3004\n     9024.3125          404.6729        101.6163\n\n</pre> <p>Load experimentally measured data from downloaded file in XYE format</p> In\u00a0[10]: Copied! <pre>job.add_experiment_from_file('data/wish.xye')\n</pre> job.add_experiment_from_file('data/wish.xye') <p>Display the experimentally measured data</p> In\u00a0[11]: Copied! <pre>job.show_experiment_chart()\n</pre> job.show_experiment_chart() <p>Define a point background</p> In\u00a0[12]: Copied! <pre>background_points = [\n    (  9162, 465),\n    ( 11136, 593),\n    ( 13313, 497),\n    ( 14906, 546),\n    ( 16454, 533),\n    ( 17352, 496),\n    ( 18743, 428),\n    ( 20179, 452),\n    ( 21368, 397),\n    ( 22176, 468),\n    ( 22827, 477),\n    ( 24644, 380),\n    ( 26439, 381),\n    ( 28257, 378),\n    ( 31196, 343),\n    ( 34034, 328),\n    ( 37265, 310),\n    ( 41214, 323),\n    ( 44827, 283),\n    ( 49830, 273),\n    ( 52905, 257),\n    ( 58204, 260),\n    ( 62916, 261),\n    ( 70186, 262),\n    ( 74204, 262),\n    ( 82103, 268),\n    ( 91958, 268),\n    (102712, 262)\n]\njob.set_background(background_points)\n</pre> background_points = [     (  9162, 465),     ( 11136, 593),     ( 13313, 497),     ( 14906, 546),     ( 16454, 533),     ( 17352, 496),     ( 18743, 428),     ( 20179, 452),     ( 21368, 397),     ( 22176, 468),     ( 22827, 477),     ( 24644, 380),     ( 26439, 381),     ( 28257, 378),     ( 31196, 343),     ( 34034, 328),     ( 37265, 310),     ( 41214, 323),     ( 44827, 283),     ( 49830, 273),     ( 52905, 257),     ( 58204, 260),     ( 62916, 261),     ( 70186, 262),     ( 74204, 262),     ( 82103, 268),     ( 91958, 268),     (102712, 262) ] job.set_background(background_points) <p>Display the experiment chart after setting the background</p> In\u00a0[13]: Copied! <pre>job.show_experiment_chart()\n</pre> job.show_experiment_chart() <p>Display the analysis chart before setting initial parameter values</p> In\u00a0[14]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Create aliases for the two types of experimental parameters</p> In\u00a0[15]: Copied! <pre>pattern= job.pattern\ninstrument = job.instrument\n</pre> pattern= job.pattern instrument = job.instrument <p>Change the default value of some instrumental parameters and display the analysis chart again</p> In\u00a0[16]: Copied! <pre>instrument.dtt1 = 20770\ninstrument.dtt2 = -1.08308\ninstrument.ttheta_bank = 152.827\njob.show_analysis_chart()\n</pre> instrument.dtt1 = 20770 instrument.dtt2 = -1.08308 instrument.ttheta_bank = 152.827 job.show_analysis_chart() <p>Change the scale and display the analysis chart again</p> In\u00a0[17]: Copied! <pre>phase.scale = 0.5\njob.show_analysis_chart()\n</pre> phase.scale = 0.5 job.show_analysis_chart() <p>Change the default values of the peak profile related parameters and display the analysis chart again</p> In\u00a0[18]: Copied! <pre>instrument.alpha0 = 0\ninstrument.alpha1 = 0.1\ninstrument.beta0 = 0.01\ninstrument.beta1 = 0.01\ninstrument.sigma0 = 0\ninstrument.sigma1 = 0\ninstrument.sigma2 = 5\njob.show_analysis_chart()\n</pre> instrument.alpha0 = 0 instrument.alpha1 = 0.1 instrument.beta0 = 0.01 instrument.beta1 = 0.01 instrument.sigma0 = 0 instrument.sigma1 = 0 instrument.sigma2 = 5 job.show_analysis_chart() <p>Select parameters to be refined in the first round</p> In\u00a0[19]: Copied! <pre>phase.scale.free = True\npattern.zero_shift.free = True\n</pre> phase.scale.free = True pattern.zero_shift.free = True <p>Print parameters to be refined (free parameters) before fitting</p> In\u00a0[20]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() name value error 1 .phases['ncaf'].scale 0.5 0.0 <p>Start Least-Squares minimization to refine the selected parameters</p> In\u00a0[21]: Copied! <pre>job.fit()\n</pre> job.fit() <pre>Fitting result\nStatus: \ud83e\udd73 Success\nDuration: \u231b 11.96 s\nReduced \u03c7\u00b2: \ud83d\udc4d 19.03\n</pre> <p>Print the refined parameters after fitting</p> In\u00a0[22]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() name value error 1 .phases['ncaf'].scale 0.983169 0.005159 2 .pattern.zero_shift -3.376425 \u00b5s 0.085604 <p>Display the analysis chart after the first fitting</p> In\u00a0[23]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Select more parameters to be refined in the second round</p> In\u00a0[24]: Copied! <pre>instrument.alpha1.free = True\ninstrument.beta0.free = True\ninstrument.beta1.free = True\ninstrument.sigma2.free = True\n</pre> instrument.alpha1.free = True instrument.beta0.free = True instrument.beta1.free = True instrument.sigma2.free = True <p>Print free parameters before the second fitting</p> In\u00a0[25]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() name value error 1 .phases['ncaf'].scale 0.983169 0.005159 2 .instrument.sigma2 5.000000 \u00b5s\u00b2/\u00c5\u2074 0.000000 3 .instrument.alpha1 0.100000 0.000000 4 .instrument.beta0 0.010000 0.000000 5 .instrument.beta1 0.010000 0.000000 6 .pattern.zero_shift -3.376425 \u00b5s 0.085604 <p>Start the second round of minimization</p> In\u00a0[26]: Copied! <pre>job.fit()\n</pre> job.fit() <pre>Fitting result\nStatus: \ud83e\udd73 Success\nDuration: \u231b 27.01 s\nReduced \u03c7\u00b2: \ud83d\udc4d 6.87\n</pre> <p>Print free parameters after the third fitting</p> In\u00a0[27]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() name value error 1 .phases['ncaf'].scale 1.085347 0.003434 2 .instrument.sigma2 13.778083 \u00b5s\u00b2/\u00c5\u2074 0.764276 3 .instrument.alpha1 0.083958 0.001075 4 .instrument.beta0 0.006515 0.000041 5 .instrument.beta1 0.012430 0.000216 6 .pattern.zero_shift -3.440901 \u00b5s 0.076697 <p>Display the analysis chart after the third fitting</p> In\u00a0[28]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Show all parameters after refinement</p> In\u00a0[29]: Copied! <pre>job.show_parameters()\n</pre> job.show_parameters() name value error min max vary 1 .phases['ncaf'].cell.length_a 10.250256 \u00c5 0.0 inf 2 .phases['ncaf'].atom_sites['Ca'].occupancy 1.000000 -inf inf 3 .phases['ncaf'].atom_sites['Ca'].fract_x 0.466100 -inf inf 4 .phases['ncaf'].atom_sites['Ca'].fract_y 0.000000 -inf inf 5 .phases['ncaf'].atom_sites['Ca'].fract_z 0.250000 -inf inf 6 .phases['ncaf'].atom_sites['Ca'].b_iso_or_equiv 0.900000 \u00c5\u00b2 0.0 inf 7 .phases['ncaf'].atom_sites['Al'].occupancy 1.000000 -inf inf 8 .phases['ncaf'].atom_sites['Al'].fract_x 0.251710 -inf inf 9 .phases['ncaf'].atom_sites['Al'].fract_y 0.251710 -inf inf 10 .phases['ncaf'].atom_sites['Al'].fract_z 0.251710 -inf inf 11 .phases['ncaf'].atom_sites['Al'].b_iso_or_equiv 0.660000 \u00c5\u00b2 0.0 inf 12 .phases['ncaf'].atom_sites['Na'].occupancy 1.000000 -inf inf 13 .phases['ncaf'].atom_sites['Na'].fract_x 0.084810 -inf inf 14 .phases['ncaf'].atom_sites['Na'].fract_y 0.084810 -inf inf 15 .phases['ncaf'].atom_sites['Na'].fract_z 0.084810 -inf inf 16 .phases['ncaf'].atom_sites['Na'].b_iso_or_equiv 1.900000 \u00c5\u00b2 0.0 inf 17 .phases['ncaf'].atom_sites['F1'].occupancy 1.000000 -inf inf 18 .phases['ncaf'].atom_sites['F1'].fract_x 0.137500 -inf inf 19 .phases['ncaf'].atom_sites['F1'].fract_y 0.305300 -inf inf 20 .phases['ncaf'].atom_sites['F1'].fract_z 0.119500 -inf inf 21 .phases['ncaf'].atom_sites['F1'].b_iso_or_equiv 0.900000 \u00c5\u00b2 0.0 inf 22 .phases['ncaf'].atom_sites['F2'].occupancy 1.000000 -inf inf 23 .phases['ncaf'].atom_sites['F2'].fract_x 0.362600 -inf inf 24 .phases['ncaf'].atom_sites['F2'].fract_y 0.363400 -inf inf 25 .phases['ncaf'].atom_sites['F2'].fract_z 0.186700 -inf inf 26 .phases['ncaf'].atom_sites['F2'].b_iso_or_equiv 1.280000 \u00c5\u00b2 0.0 inf 27 .phases['ncaf'].atom_sites['F3'].occupancy 1.000000 -inf inf 28 .phases['ncaf'].atom_sites['F3'].fract_x 0.461200 -inf inf 29 .phases['ncaf'].atom_sites['F3'].fract_y 0.461200 -inf inf 30 .phases['ncaf'].atom_sites['F3'].fract_z 0.461200 -inf inf 31 .phases['ncaf'].atom_sites['F3'].b_iso_or_equiv 0.790000 \u00c5\u00b2 0.0 inf 32 .phases['ncaf'].scale 1.085347 0.003434 0.0 inf True 33 .instrument.ttheta_bank 152.827000 deg -inf inf 34 .instrument.dtt1 20770.000000 \u00b5s/\u00c5 -inf inf 35 .instrument.dtt2 -1.083080 \u00b5s/\u00c5\u00b2 -inf inf 36 .instrument.sigma0 0.000000 \u00b5s\u00b2 -inf inf 37 .instrument.sigma1 0.000000 \u00b5s\u00b2/\u00c5\u00b2 -inf inf 38 .instrument.sigma2 13.778083 \u00b5s\u00b2/\u00c5\u2074 0.764276 -inf inf True 39 .instrument.alpha0 0.000000 -inf inf 40 .instrument.alpha1 0.083958 0.001075 -inf inf True 41 .instrument.beta0 0.006515 0.000041 -inf inf True 42 .instrument.beta1 0.012430 0.000216 -inf inf True 43 .pattern.zero_shift -3.440901 \u00b5s 0.076697 -inf inf True 44 .pattern.backgrounds[0]['9162,0_deg'].intensity 465.000000 -inf inf 45 .pattern.backgrounds[0]['11136,0_deg'].intensity 593.000000 -inf inf 46 .pattern.backgrounds[0]['13313,0_deg'].intensity 497.000000 -inf inf 47 .pattern.backgrounds[0]['14906,0_deg'].intensity 546.000000 -inf inf 48 .pattern.backgrounds[0]['16454,0_deg'].intensity 533.000000 -inf inf 49 .pattern.backgrounds[0]['17352,0_deg'].intensity 496.000000 -inf inf 50 .pattern.backgrounds[0]['18743,0_deg'].intensity 428.000000 -inf inf 51 .pattern.backgrounds[0]['20179,0_deg'].intensity 452.000000 -inf inf 52 .pattern.backgrounds[0]['21368,0_deg'].intensity 397.000000 -inf inf 53 .pattern.backgrounds[0]['22176,0_deg'].intensity 468.000000 -inf inf 54 .pattern.backgrounds[0]['22827,0_deg'].intensity 477.000000 -inf inf 55 .pattern.backgrounds[0]['24644,0_deg'].intensity 380.000000 -inf inf 56 .pattern.backgrounds[0]['26439,0_deg'].intensity 381.000000 -inf inf 57 .pattern.backgrounds[0]['28257,0_deg'].intensity 378.000000 -inf inf 58 .pattern.backgrounds[0]['31196,0_deg'].intensity 343.000000 -inf inf 59 .pattern.backgrounds[0]['34034,0_deg'].intensity 328.000000 -inf inf 60 .pattern.backgrounds[0]['37265,0_deg'].intensity 310.000000 -inf inf 61 .pattern.backgrounds[0]['41214,0_deg'].intensity 323.000000 -inf inf 62 .pattern.backgrounds[0]['44827,0_deg'].intensity 283.000000 -inf inf 63 .pattern.backgrounds[0]['49830,0_deg'].intensity 273.000000 -inf inf 64 .pattern.backgrounds[0]['52905,0_deg'].intensity 257.000000 -inf inf 65 .pattern.backgrounds[0]['58204,0_deg'].intensity 260.000000 -inf inf 66 .pattern.backgrounds[0]['62916,0_deg'].intensity 261.000000 -inf inf 67 .pattern.backgrounds[0]['70186,0_deg'].intensity 262.000000 -inf inf 68 .pattern.backgrounds[0]['74204,0_deg'].intensity 262.000000 -inf inf 69 .pattern.backgrounds[0]['82103,0_deg'].intensity 268.000000 -inf inf 70 .pattern.backgrounds[0]['91958,0_deg'].intensity 268.000000 -inf inf 71 .pattern.backgrounds[0]['102712,0_deg'].intensity 262.000000 -inf inf"},{"location":"examples/Fitting_pd-neut-tof_NCAF-WISH/#fitting-pd-neut-tof-ncaf-wish","title":"Fitting pd-neut-tof NCAF-WISH\u00b6","text":"<p>This example shows how to refine the crystal structure parameters of Si from neutron diffraction data in a time-of-flight experiment performed on WISH diffractometer at ISIS.</p>"},{"location":"examples/Fitting_pd-neut-tof_NCAF-WISH/#import-easydiffraction","title":"Import EasyDiffraction\u00b6","text":""},{"location":"examples/Fitting_pd-neut-tof_NCAF-WISH/#create-a-job","title":"Create a job\u00b6","text":"<p>Create a job \u2014 the main object to store all the information</p>"},{"location":"examples/Fitting_pd-neut-tof_NCAF-WISH/#define-a-model","title":"Define a model\u00b6","text":"<p>Download the CIF file from the EasyDiffraction repository on GitHub</p>"},{"location":"examples/Fitting_pd-neut-tof_NCAF-WISH/#define-an-experiment","title":"Define an experiment\u00b6","text":"<p>Download the data file from the EasyDiffraction repository on GitHub</p>"},{"location":"examples/Fitting_pd-neut-tof_NCAF-WISH/#perform-an-analysis","title":"Perform an analysis\u00b6","text":""},{"location":"examples/Fitting_pd-neut-tof_Si-SEPD/","title":"pd-neut-tof Si-SEPD","text":"In\u00a0[2]: Copied! <pre>import easydiffraction as ed\n</pre> import easydiffraction as ed <p>Create a job \u2014 the main object to store all the information</p> In\u00a0[3]: Copied! <pre>job = ed.Job(type='tof')\nprint(job.type)\n</pre> job = ed.Job(type='tof') print(job.type) <pre>Job type: pd-tof-unp-1d-neut\n</pre> In\u00a0[4]: Copied! <pre>phase = ed.Phase(name='si')\n</pre> phase = ed.Phase(name='si') <p>Set space group</p> In\u00a0[5]: Copied! <pre>phase.space_group.name_hm_alt = 'F d -3 m'\nprint(phase.space_group.name_hm_alt)\nprint(phase.space_group.it_coordinate_system_code)\n</pre> phase.space_group.name_hm_alt = 'F d -3 m' print(phase.space_group.name_hm_alt) print(phase.space_group.it_coordinate_system_code) <pre>&lt;Descriptor 'hermann_mauguin': F d -3 m&gt;\n&lt;Descriptor 'coordinate-code': 2&gt;\n</pre> <p>Set cell parameters</p> In\u00a0[6]: Copied! <pre>phase.cell.length_a = 5.43146\n</pre> phase.cell.length_a = 5.43146 <p>Add atoms</p> In\u00a0[7]: Copied! <pre>phase.atom_sites.append(label='Si',\n                        type_symbol='Si',\n                        fract_x=0.125,\n                        fract_y=0.125,\n                        fract_z=0.125,\n                        occupancy=1,\n                        b_iso_or_equiv=0.529)\n</pre> phase.atom_sites.append(label='Si',                         type_symbol='Si',                         fract_x=0.125,                         fract_y=0.125,                         fract_z=0.125,                         occupancy=1,                         b_iso_or_equiv=0.529) <p>Add phase to the job object</p> In\u00a0[8]: Copied! <pre>job.add_phase(phase=phase)\nprint(job.phases)\n</pre> job.add_phase(phase=phase) print(job.phases) <pre>Collection of 1 phases: ['si']\n</pre> <p>Show phase info in CIF format</p> In\u00a0[9]: Copied! <pre>phase = job.phases['si']\nprint(phase.cif)\n</pre> phase = job.phases['si'] print(phase.cif) <pre>data_si\n_cell_length_a 5.43146\n_cell_length_b 5.43146\n_cell_length_c 5.43146\n_cell_angle_alpha 90.00000000\n_cell_angle_beta 90.00000000\n_cell_angle_gamma 90.00000000\n_space_group_name_H-M_ref 'F d -3 m'\n_space_group_IT_coordinate_system_code 2\n\nloop_\n_atom_site_label\n_atom_site_type_symbol\n_atom_site_fract_x\n_atom_site_fract_y\n_atom_site_fract_z\n_atom_site_occupancy\n_atom_site_adp_type\n_atom_site_B_iso_or_equiv\nSi Si 0.125 0.125 0.125 1.00000000 Biso 0.529\n</pre> <p>Display the crystal structure of a given model</p> In\u00a0[10]: Copied! <pre>job.show_crystal_structure(id='si')\n</pre> job.show_crystal_structure(id='si') <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> In\u00a0[11]: Copied! <pre>ed.download_from_repository('sepd.xye', destination='data')\n</pre> ed.download_from_repository('sepd.xye', destination='data') <p>Show content of the downloaded file (first 5 lines)</p> In\u00a0[12]: Copied! <pre>with open('data/sepd.xye') as f:\n    print(''.join(f.readlines()[:5]))\n</pre> with open('data/sepd.xye') as f:     print(''.join(f.readlines()[:5])) <pre>2000.0 213.8 3.3\n2005.0 213.8 3.3\n2010.0 210.1 3.3\n2015.0 213.3 3.3\n2020.0 211.9 3.3\n\n</pre> <p>Load experimentally measured data from a file in XYE format</p> In\u00a0[13]: Copied! <pre>job.add_experiment_from_file('data/sepd.xye')\n</pre> job.add_experiment_from_file('data/sepd.xye') <p>Display the experimentally measured data</p> In\u00a0[14]: Copied! <pre>job.show_experiment_chart(show_legend=False)\n</pre> job.show_experiment_chart(show_legend=False) <p>Define a point background</p> In\u00a0[15]: Copied! <pre>background_points = [(x, 200) for x in range(0, 35000, 5000)]\nprint(background_points)\n</pre> background_points = [(x, 200) for x in range(0, 35000, 5000)] print(background_points) <pre>[(0, 200), (5000, 200), (10000, 200), (15000, 200), (20000, 200), (25000, 200), (30000, 200)]\n</pre> In\u00a0[16]: Copied! <pre>job.set_background(background_points)\n</pre> job.set_background(background_points) <p>Display the experiment chart after setting the background</p> In\u00a0[17]: Copied! <pre>job.show_experiment_chart()\n</pre> job.show_experiment_chart() <p>Display the analysis chart before setting initial parameter values</p> In\u00a0[18]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Create aliases for the two types of experimental parameters</p> In\u00a0[19]: Copied! <pre>pattern_params = job.pattern\nexperiment_params = job.parameters\n</pre> pattern_params = job.pattern experiment_params = job.parameters <p>Change the default value of some instrumental parameters and display the analysis chart again</p> In\u00a0[20]: Copied! <pre>experiment_params.dtt1 = 7476.91\nexperiment_params.dtt2 = -1.54\nexperiment_params.ttheta_bank = 144.845\njob.show_analysis_chart()\n</pre> experiment_params.dtt1 = 7476.91 experiment_params.dtt2 = -1.54 experiment_params.ttheta_bank = 144.845 job.show_analysis_chart() <p>Change the scale and display the analysis chart again</p> In\u00a0[21]: Copied! <pre>phase.scale = 10\njob.show_analysis_chart()\n</pre> phase.scale = 10 job.show_analysis_chart() <p>Change the default values of the peak profile related parameters and display the analysis chart again</p> In\u00a0[22]: Copied! <pre>experiment_params.alpha0 = 0.024\nexperiment_params.alpha1 = 0.204\nexperiment_params.beta0 = 0.038\nexperiment_params.beta1 = 0.011\nexperiment_params.sigma0 = 0.0\nexperiment_params.sigma1 = 0.0\nexperiment_params.sigma2 = 0.0\njob.show_analysis_chart()\n</pre> experiment_params.alpha0 = 0.024 experiment_params.alpha1 = 0.204 experiment_params.beta0 = 0.038 experiment_params.beta1 = 0.011 experiment_params.sigma0 = 0.0 experiment_params.sigma1 = 0.0 experiment_params.sigma2 = 0.0 job.show_analysis_chart() <p>Select parameters to be refined in the first round</p> In\u00a0[23]: Copied! <pre>phase.scale.free = True\npattern_params.zero_shift.free = True\n</pre> phase.scale.free = True pattern_params.zero_shift.free = True <p>Print parameters to be refined (free parameters) before fitting</p> In\u00a0[24]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() name value error 1 .phases['si'].scale 10.0 0.0 <p>Start Least-Squares minimization to refine the selected parameters</p> In\u00a0[25]: Copied! <pre>job.fit()\n</pre> job.fit() <pre>Fitting result\nStatus: \ud83e\udd73 Success\nDuration: \u231b 6.49 s\nReduced \u03c7\u00b2: \ud83d\udc4d 36.80\n</pre> <p>Print the refined parameters after fitting</p> In\u00a0[26]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() name value error 1 .phases['si'].scale 12.810954 0.112699 2 .pattern.zero_shift -4.166396 \u00b5s 0.052262 <p>Display the analysis chart after the first fitting</p> In\u00a0[27]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Allow background parameters to be refined</p> In\u00a0[28]: Copied! <pre>for background_point in pattern_params.backgrounds[0]:\n    background_point.y.free = True\n</pre> for background_point in pattern_params.backgrounds[0]:     background_point.y.free = True <p>Print free parameters before the second fitting</p> In\u00a0[29]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() name value error 1 .phases['si'].scale 12.810954 0.112699 2 .pattern.zero_shift -4.166396 \u00b5s 0.052262 3 .pattern.backgrounds[0]['0,0_deg'].intensity 200.000000 0.000000 4 .pattern.backgrounds[0]['5000,0_deg'].intensity 200.000000 0.000000 5 .pattern.backgrounds[0]['10000,0_deg'].intensity 200.000000 0.000000 6 .pattern.backgrounds[0]['15000,0_deg'].intensity 200.000000 0.000000 7 .pattern.backgrounds[0]['20000,0_deg'].intensity 200.000000 0.000000 8 .pattern.backgrounds[0]['25000,0_deg'].intensity 200.000000 0.000000 9 .pattern.backgrounds[0]['30000,0_deg'].intensity 200.000000 0.000000 <p>Start second round of minimization</p> In\u00a0[30]: Copied! <pre>job.fit()\n</pre> job.fit() <pre>Fitting result\nStatus: \ud83e\udd73 Success\nDuration: \u231b 4.88 s\nReduced \u03c7\u00b2: \ud83d\udc4d 16.18\n</pre> <p>Print free parameters after the second fitting</p> In\u00a0[31]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() name value error 1 .phases['si'].scale 13.169738 0.075010 2 .pattern.zero_shift -4.165397 \u00b5s 0.033715 3 .pattern.backgrounds[0]['0,0_deg'].intensity 269.666225 7.992930 4 .pattern.backgrounds[0]['5000,0_deg'].intensity 150.600340 2.523188 5 .pattern.backgrounds[0]['10000,0_deg'].intensity 121.156660 1.990883 6 .pattern.backgrounds[0]['15000,0_deg'].intensity 136.251201 1.988307 7 .pattern.backgrounds[0]['20000,0_deg'].intensity 133.911792 1.974323 8 .pattern.backgrounds[0]['25000,0_deg'].intensity 175.057849 2.293309 9 .pattern.backgrounds[0]['30000,0_deg'].intensity 183.334800 3.224987 <p>Display the analysis chart after the second fitting</p> In\u00a0[32]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart() <p>Select more parameters to be refined in the third round</p> In\u00a0[33]: Copied! <pre>experiment_params.sigma0.free = True\nexperiment_params.sigma1.free = True\nexperiment_params.sigma2.free = True\n</pre> experiment_params.sigma0.free = True experiment_params.sigma1.free = True experiment_params.sigma2.free = True <p>Disable refinement of background parameters</p> In\u00a0[34]: Copied! <pre>for background_point in pattern_params.backgrounds[0]:\n    background_point.y.free = False\n</pre> for background_point in pattern_params.backgrounds[0]:     background_point.y.free = False <p>Print free parameters before the third fitting</p> In\u00a0[35]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() name value error 1 .phases['si'].scale 13.169738 0.075010 2 .instrument.sigma0 0.000000 \u00b5s\u00b2 0.000000 3 .instrument.sigma1 0.000000 \u00b5s\u00b2/\u00c5\u00b2 0.000000 4 .instrument.sigma2 0.000000 \u00b5s\u00b2/\u00c5\u2074 0.000000 5 .pattern.zero_shift -4.165397 \u00b5s 0.033715 <p>Start third round of minimization</p> In\u00a0[36]: Copied! <pre>job.fit()\n</pre> job.fit() <pre>Fitting result\nStatus: \ud83e\udd73 Success\nDuration: \u231b 11.69 s\nReduced \u03c7\u00b2: \ud83d\udc4d 5.57\n</pre> <p>Print free parameters after the third fitting</p> In\u00a0[37]: Copied! <pre>job.show_free_parameters()\n</pre> job.show_free_parameters() name value error 1 .phases['si'].scale 14.846289 0.046806 2 .instrument.sigma0 -4.968327 \u00b5s\u00b2 0.923895 3 .instrument.sigma1 66.704832 \u00b5s\u00b2/\u00c5\u00b2 1.503367 4 .instrument.sigma2 -10.512966 \u00b5s\u00b2/\u00c5\u2074 0.172826 5 .pattern.zero_shift -3.357013 \u00b5s 0.034452 <p>Display the analysis chart after the third fitting</p> In\u00a0[38]: Copied! <pre>job.show_analysis_chart()\n</pre> job.show_analysis_chart()"},{"location":"examples/Fitting_pd-neut-tof_Si-SEPD/#fitting-pd-neut-tof-si-sepd","title":"Fitting pd-neut-tof Si-SEPD\u00b6","text":"<p>This example shows how to refine the crystal structure parameters of Si from neutron diffraction data in a time-of-flight experiment performed on SEPD diffractometer at Argonne.</p>"},{"location":"examples/Fitting_pd-neut-tof_Si-SEPD/#import-easydiffraction","title":"Import EasyDiffraction\u00b6","text":""},{"location":"examples/Fitting_pd-neut-tof_Si-SEPD/#create-a-job","title":"Create a job\u00b6","text":""},{"location":"examples/Fitting_pd-neut-tof_Si-SEPD/#define-a-model","title":"Define a model\u00b6","text":"<p>Create a phase object</p>"},{"location":"examples/Fitting_pd-neut-tof_Si-SEPD/#define-an-experiment","title":"Define an experiment\u00b6","text":"<p>Download the data file from the EasyDiffraction repository on GitHub</p>"},{"location":"examples/Fitting_pd-neut-tof_Si-SEPD/#perform-an-analysis","title":"Perform an analysis\u00b6","text":""},{"location":"examples/Simulation_pd-xray_NaCl/","title":"pd-xray NaCl","text":"In\u00a0[2]: Copied! <pre>import easydiffraction as ed\n</pre> import easydiffraction as ed In\u00a0[3]: Copied! <pre>job = ed.Job(type='pd-xray')\nprint(job.type)\n</pre> job = ed.Job(type='pd-xray') print(job.type) <pre>Job type: pd-cwl-unp-1d-xray\n</pre> In\u00a0[4]: Copied! <pre>phase = ed.Phase(name='nacl')\n</pre> phase = ed.Phase(name='nacl') <p>Set space group</p> In\u00a0[5]: Copied! <pre>phase.space_group.name_hm_alt = 'F m -3 m'\n</pre> phase.space_group.name_hm_alt = 'F m -3 m' <p>Set cell parameters</p> In\u00a0[6]: Copied! <pre>phase.cell.length_a = 5.691694\n</pre> phase.cell.length_a = 5.691694 <p>Add atoms</p> In\u00a0[7]: Copied! <pre>phase.atom_sites.append(label='Na',\n                        type_symbol='Na',\n                        fract_x=0,\n                        fract_y=0,\n                        fract_z=0,\n                        occupancy=1,\n                        u_iso_or_equiv=0.01)\nphase.atom_sites.append(label='Cl',\n                        type_symbol='Cl',\n                        fract_x=0,\n                        fract_y=0,\n                        fract_z=0.5,\n                        occupancy=1,\n                        u_iso_or_equiv=0.01)\n</pre> phase.atom_sites.append(label='Na',                         type_symbol='Na',                         fract_x=0,                         fract_y=0,                         fract_z=0,                         occupancy=1,                         u_iso_or_equiv=0.01) phase.atom_sites.append(label='Cl',                         type_symbol='Cl',                         fract_x=0,                         fract_y=0,                         fract_z=0.5,                         occupancy=1,                         u_iso_or_equiv=0.01) <p>Add phase to the job object</p> In\u00a0[8]: Copied! <pre>job.add_phase(phase=phase)\nprint(job.phases)\n</pre> job.add_phase(phase=phase) print(job.phases) <pre>Collection of 1 phases: ['nacl']\n</pre> <p>Show phase info in CIF format</p> In\u00a0[9]: Copied! <pre>phase = job.phases['nacl']\nprint(phase.cif)\n</pre> phase = job.phases['nacl'] print(phase.cif) <pre>data_nacl\n_cell_length_a 5.691694\n_cell_length_b 5.691694\n_cell_length_c 5.691694\n_cell_angle_alpha 90.00000000\n_cell_angle_beta 90.00000000\n_cell_angle_gamma 90.00000000\n_space_group_name_H-M_ref 'F m -3 m'\n_space_group_IT_coordinate_system_code 1\n\nloop_\n_atom_site_label\n_atom_site_type_symbol\n_atom_site_fract_x\n_atom_site_fract_y\n_atom_site_fract_z\n_atom_site_occupancy\n_atom_site_adp_type\n_atom_site_U_iso_or_equiv\nNa Na 0.00000000 0.00000000 0.00000000 1.00000000 Uiso 0.01\nCl Cl 0.00000000 0.00000000 0.5 1.00000000 Uiso 0.01\n</pre> <p>Display the crystal structure of a given model</p> In\u00a0[10]: Copied! <pre>job.show_crystal_structure(id='nacl')\n</pre> job.show_crystal_structure(id='nacl') <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> In\u00a0[11]: Copied! <pre>job.instrument.twotheta_range_min = 20\njob.instrument.twotheta_range_max = 160\njob.instrument.twotheta_range_inc = 0.05\n</pre> job.instrument.twotheta_range_min = 20 job.instrument.twotheta_range_max = 160 job.instrument.twotheta_range_inc = 0.05 In\u00a0[12]: Copied! <pre>job.show_simulation_chart()\n</pre> job.show_simulation_chart() <p>Show the names of all parameters, their values, etc. Parameter names can be used to access the parameter and change its value.</p> In\u00a0[13]: Copied! <pre>job.show_parameters()\n</pre> job.show_parameters() name value error min max vary 1 .phases['nacl'].cell.length_a 5.691694 \u00c5 0.0 inf 2 .phases['nacl'].atom_sites['Na'].occupancy 1.000000 -inf inf 3 .phases['nacl'].atom_sites['Na'].fract_x 0.000000 -inf inf 4 .phases['nacl'].atom_sites['Na'].fract_y 0.000000 -inf inf 5 .phases['nacl'].atom_sites['Na'].fract_z 0.000000 -inf inf 6 .phases['nacl'].atom_sites['Na'].u_iso_or_equiv 0.010000 \u00c5\u00b2 0.0 inf 7 .phases['nacl'].atom_sites['Cl'].occupancy 1.000000 -inf inf 8 .phases['nacl'].atom_sites['Cl'].fract_x 0.000000 -inf inf 9 .phases['nacl'].atom_sites['Cl'].fract_y 0.000000 -inf inf 10 .phases['nacl'].atom_sites['Cl'].fract_z 0.500000 -inf inf 11 .phases['nacl'].atom_sites['Cl'].u_iso_or_equiv 0.010000 \u00c5\u00b2 0.0 inf 12 .phases['nacl'].scale 1.000000 0.0 inf True 13 .instrument.wavelength 1.540560 \u00c5 -inf inf 14 .instrument.resolution_u 0.000200 -inf inf 15 .instrument.resolution_v -0.000200 -inf inf 16 .instrument.resolution_w 0.012000 -inf inf 17 .instrument.resolution_x 0.000000 -inf inf 18 .instrument.resolution_y 0.000000 -inf inf 19 .instrument.reflex_asymmetry_p1 0.000000 -inf inf 20 .instrument.reflex_asymmetry_p2 0.000000 -inf inf 21 .instrument.reflex_asymmetry_p3 0.000000 -inf inf 22 .instrument.reflex_asymmetry_p4 0.000000 -inf inf 23 .zero_shift 0.000000 deg -inf inf <p>Change the default value of the wavelength used in the experiment and display the analysis chart again</p> In\u00a0[14]: Copied! <pre>job.instrument.wavelength = 1.5\njob.show_simulation_chart()\n</pre> job.instrument.wavelength = 1.5 job.show_simulation_chart() <p>Change the default values of the peak profile related parameters and display the analysis chart again</p> In\u00a0[15]: Copied! <pre>job.instrument.resolution_u = 0.1\njob.instrument.resolution_v = -0.1\njob.instrument.resolution_w = 0.2\njob.show_simulation_chart()\n</pre> job.instrument.resolution_u = 0.1 job.instrument.resolution_v = -0.1 job.instrument.resolution_w = 0.2 job.show_simulation_chart() <p>Change the value of the unit cell parameter and display the analysis chart again</p> In\u00a0[16]: Copied! <pre>job.phases['nacl'].cell.length_a = 5.0\njob.show_simulation_chart()\n</pre> job.phases['nacl'].cell.length_a = 5.0 job.show_simulation_chart()"},{"location":"examples/Simulation_pd-xray_NaCl/#simulation-pd-xray-nacl","title":"Simulation pd-xray NaCl\u00b6","text":"<p>This example demonstrates how to simulate a powder diffraction pattern of NaCl for the X-ray case.</p>"},{"location":"examples/Simulation_pd-xray_NaCl/#import-easydiffraction","title":"Import EasyDiffraction\u00b6","text":""},{"location":"examples/Simulation_pd-xray_NaCl/#create-a-job","title":"Create a job\u00b6","text":"<p>Create a job \u2014 the main object to store all the information</p>"},{"location":"examples/Simulation_pd-xray_NaCl/#define-a-model","title":"Define a model\u00b6","text":"<p>Create a phase object</p>"},{"location":"examples/Simulation_pd-xray_NaCl/#define-an-experiment","title":"Define an experiment\u00b6","text":"<p>Although in this example we only simulate the diffraction pattern, some parameters for the \u2018virtual experiment\u2019 still need to be set. For example, the wavelength of the X-ray beam, the range of 2-theta angles, etc.</p> <p>Let's start by setting the range and step of the 2-theta angles. The other parameters will be set later.</p>"},{"location":"examples/Simulation_pd-xray_NaCl/#perform-an-analysis","title":"Perform an analysis\u00b6","text":"<p>Display the analysis chart before changing the values of other parameters from their default values.</p>"},{"location":"how-to-use/","title":"How to use","text":"<p>This section provides a collection of Jupyter Notebook examples that demonstrate how to use EasyDiffraction for various tasks. These examples are presented as static HTML pages.</p> <p>In the top right corner of each example, you will find </p> <ul> <li>a button to download the example as a Jupyter Notebook </li> <li>a button to open that example in Google Colab </li> </ul>"}]}